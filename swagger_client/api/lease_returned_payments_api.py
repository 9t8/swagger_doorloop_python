# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LeaseReturnedPaymentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_lease_reversed_payment(self, **kwargs):  # noqa: E501
        """Delete a Lease Returned Payment  # noqa: E501

        Deletes a Lease Returned Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_lease_reversed_payment(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LeaseReversedPayment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_lease_reversed_payment_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_lease_reversed_payment_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_lease_reversed_payment_with_http_info(self, **kwargs):  # noqa: E501
        """Delete a Lease Returned Payment  # noqa: E501

        Deletes a Lease Returned Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_lease_reversed_payment_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: LeaseReversedPayment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_lease_reversed_payment" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Key']  # noqa: E501

        return self.api_client.call_api(
            '/lease-reversed-payments/{leaseReversedPaymentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeaseReversedPayment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lease_reversed_payment(self, lease_reversed_payment_id, **kwargs):  # noqa: E501
        """Retrieve a Lease Returned Payment  # noqa: E501

        Retrieves a Lease Returned Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lease_reversed_payment(lease_reversed_payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object lease_reversed_payment_id: (required)
        :return: LeaseReversedPayment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lease_reversed_payment_with_http_info(lease_reversed_payment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lease_reversed_payment_with_http_info(lease_reversed_payment_id, **kwargs)  # noqa: E501
            return data

    def get_lease_reversed_payment_with_http_info(self, lease_reversed_payment_id, **kwargs):  # noqa: E501
        """Retrieve a Lease Returned Payment  # noqa: E501

        Retrieves a Lease Returned Payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lease_reversed_payment_with_http_info(lease_reversed_payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object lease_reversed_payment_id: (required)
        :return: LeaseReversedPayment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lease_reversed_payment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lease_reversed_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lease_reversed_payment_id' is set
        if ('lease_reversed_payment_id' not in params or
                params['lease_reversed_payment_id'] is None):
            raise ValueError("Missing the required parameter `lease_reversed_payment_id` when calling `get_lease_reversed_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lease_reversed_payment_id' in params:
            path_params['leaseReversedPaymentId'] = params['lease_reversed_payment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Key']  # noqa: E501

        return self.api_client.call_api(
            '/lease-reversed-payments/{leaseReversedPaymentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeaseReversedPayment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lease_reversed_payments(self, **kwargs):  # noqa: E501
        """List all Lease Returned Payments  # noqa: E501

        Lists all Lease Returned Payments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lease_reversed_payments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object filter_lease: Filter by Lease Id
        :param object filter_property: Filter by Property Id
        :param object filter_payment_method: Filter by Payment Method
        :param object filter_owner: Filter by Owner Id
        :param object filter_date_from: Filter by Date (YYYY-MM-DD)
        :param object filter_date_to: Filter by Date (YYYY-MM-DD)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lease_reversed_payments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_lease_reversed_payments_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_lease_reversed_payments_with_http_info(self, **kwargs):  # noqa: E501
        """List all Lease Returned Payments  # noqa: E501

        Lists all Lease Returned Payments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lease_reversed_payments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object filter_lease: Filter by Lease Id
        :param object filter_property: Filter by Property Id
        :param object filter_payment_method: Filter by Payment Method
        :param object filter_owner: Filter by Owner Id
        :param object filter_date_from: Filter by Date (YYYY-MM-DD)
        :param object filter_date_to: Filter by Date (YYYY-MM-DD)
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_lease', 'filter_property', 'filter_payment_method', 'filter_owner', 'filter_date_from', 'filter_date_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lease_reversed_payments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter_lease' in params:
            query_params.append(('filter_lease', params['filter_lease']))  # noqa: E501
        if 'filter_property' in params:
            query_params.append(('filter_property', params['filter_property']))  # noqa: E501
        if 'filter_payment_method' in params:
            query_params.append(('filter_paymentMethod', params['filter_payment_method']))  # noqa: E501
        if 'filter_owner' in params:
            query_params.append(('filter_owner', params['filter_owner']))  # noqa: E501
        if 'filter_date_from' in params:
            query_params.append(('filter_date_from', params['filter_date_from']))  # noqa: E501
        if 'filter_date_to' in params:
            query_params.append(('filter_date_to', params['filter_date_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Key']  # noqa: E501

        return self.api_client.call_api(
            '/lease-reversed-payments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_lease_reversed_payments(self, **kwargs):  # noqa: E501
        """Create a Lease Returned Payment  # noqa: E501

        Create a Lease Returned Payment which marks an existing Lease Payment as returned  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_lease_reversed_payments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: LeaseReversedPayment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_lease_reversed_payments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_lease_reversed_payments_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_lease_reversed_payments_with_http_info(self, **kwargs):  # noqa: E501
        """Create a Lease Returned Payment  # noqa: E501

        Create a Lease Returned Payment which marks an existing Lease Payment as returned  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_lease_reversed_payments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: LeaseReversedPayment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_lease_reversed_payments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Key']  # noqa: E501

        return self.api_client.call_api(
            '/lease-reversed-payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LeaseReversedPayment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
