# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LeasesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_lease(self, lease_id, **kwargs):  # noqa: E501
        """Retrieve a Lease  # noqa: E501

        Retrieves a Lease  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lease(lease_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object lease_id: (required)
        :return: Lease
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lease_with_http_info(lease_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_lease_with_http_info(lease_id, **kwargs)  # noqa: E501
            return data

    def get_lease_with_http_info(self, lease_id, **kwargs):  # noqa: E501
        """Retrieve a Lease  # noqa: E501

        Retrieves a Lease  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lease_with_http_info(lease_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object lease_id: (required)
        :return: Lease
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lease_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lease" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'lease_id' is set
        if ('lease_id' not in params or
                params['lease_id'] is None):
            raise ValueError("Missing the required parameter `lease_id` when calling `get_lease`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'lease_id' in params:
            path_params['leaseId'] = params['lease_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Key']  # noqa: E501

        return self.api_client.call_api(
            '/leases/{leaseId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Lease',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_lease_tenants(self, **kwargs):  # noqa: E501
        """List all Lease Tenants  # noqa: E501

        Retrieves a list of all lease tenants, meaning, tenants that have been associated with an active list.  This endpoint includes additional information related to the lease for each tenant in DoorLoop, with the full Tenant object included as well.  If a tenant is associated with multiple leases, the tenant will appear in the results here once for each lease it is associated with.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lease_tenants(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object filter_group: Filter by Portfolio Id
        :param object filter_property: Filter by Property Id
        :param object filter_lease: Filter by Lease Id
        :param object filter_status: Filter by Status
        :param object filter_text: Filter by Tenant Name / Email
        :param object filter_moved_in_at_from: Filter by Move In Date (YYYY-MM-DD)
        :param object filter_moved_in_at_to: Filter by Move In Date (YYYY-MM-DD)
        :param object filter_moved_out_at_from: Filter by Move Out Date (YYYY-MM-DD)
        :param object filter_moved_out_at_to: Filter by Move Out Date (YYYY-MM-DD)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_lease_tenants_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_lease_tenants_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_lease_tenants_with_http_info(self, **kwargs):  # noqa: E501
        """List all Lease Tenants  # noqa: E501

        Retrieves a list of all lease tenants, meaning, tenants that have been associated with an active list.  This endpoint includes additional information related to the lease for each tenant in DoorLoop, with the full Tenant object included as well.  If a tenant is associated with multiple leases, the tenant will appear in the results here once for each lease it is associated with.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_lease_tenants_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object filter_group: Filter by Portfolio Id
        :param object filter_property: Filter by Property Id
        :param object filter_lease: Filter by Lease Id
        :param object filter_status: Filter by Status
        :param object filter_text: Filter by Tenant Name / Email
        :param object filter_moved_in_at_from: Filter by Move In Date (YYYY-MM-DD)
        :param object filter_moved_in_at_to: Filter by Move In Date (YYYY-MM-DD)
        :param object filter_moved_out_at_from: Filter by Move Out Date (YYYY-MM-DD)
        :param object filter_moved_out_at_to: Filter by Move Out Date (YYYY-MM-DD)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_group', 'filter_property', 'filter_lease', 'filter_status', 'filter_text', 'filter_moved_in_at_from', 'filter_moved_in_at_to', 'filter_moved_out_at_from', 'filter_moved_out_at_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_lease_tenants" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter_group' in params:
            query_params.append(('filter_group', params['filter_group']))  # noqa: E501
        if 'filter_property' in params:
            query_params.append(('filter_property', params['filter_property']))  # noqa: E501
        if 'filter_lease' in params:
            query_params.append(('filter_lease', params['filter_lease']))  # noqa: E501
        if 'filter_status' in params:
            query_params.append(('filter_status', params['filter_status']))  # noqa: E501
        if 'filter_text' in params:
            query_params.append(('filter_text', params['filter_text']))  # noqa: E501
        if 'filter_moved_in_at_from' in params:
            query_params.append(('filter_movedInAt_from', params['filter_moved_in_at_from']))  # noqa: E501
        if 'filter_moved_in_at_to' in params:
            query_params.append(('filter_movedInAt_to', params['filter_moved_in_at_to']))  # noqa: E501
        if 'filter_moved_out_at_from' in params:
            query_params.append(('filter_movedOutAt_from', params['filter_moved_out_at_from']))  # noqa: E501
        if 'filter_moved_out_at_to' in params:
            query_params.append(('filter_movedOutAt_To', params['filter_moved_out_at_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Key']  # noqa: E501

        return self.api_client.call_api(
            '/leases/tenants', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_leases(self, authorization, **kwargs):  # noqa: E501
        """List all Leases  # noqa: E501

        Lists all Leases  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leases(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object authorization: Your API key goes here (required)
        :param object filter_group: Filters by Portfolio Id
        :param object filter_property: Filter by Property Id
        :param object filter_owner: Filter by Owner Id
        :param object filter_text: Filter by Lease Name
        :param object filter_start_date_from: Filter by Start Date (YYYY-MM-DD)
        :param object filter_start_date_to: Filter by Start Date (YYYY-MM-DD)
        :param object filter_end_date_from: Filter by End Date (YYYY-MM-DD)
        :param object filter_end_date_to: Filter by End Date (YYYY-MM-DD)
        :param object filter_property_class: Filter by Property Class
        :param object filter_unit: Filter by Unit Id
        :param object filter_tenant: Filter by Tenant Id
        :param object filter_outstanding_balance_greater_than: Filter by Min Outstanding Balance
        :param object filter_status: Filter by Status
        :param object filter_term: Filter by Term
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_leases_with_http_info(authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_leases_with_http_info(authorization, **kwargs)  # noqa: E501
            return data

    def get_leases_with_http_info(self, authorization, **kwargs):  # noqa: E501
        """List all Leases  # noqa: E501

        Lists all Leases  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_leases_with_http_info(authorization, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object authorization: Your API key goes here (required)
        :param object filter_group: Filters by Portfolio Id
        :param object filter_property: Filter by Property Id
        :param object filter_owner: Filter by Owner Id
        :param object filter_text: Filter by Lease Name
        :param object filter_start_date_from: Filter by Start Date (YYYY-MM-DD)
        :param object filter_start_date_to: Filter by Start Date (YYYY-MM-DD)
        :param object filter_end_date_from: Filter by End Date (YYYY-MM-DD)
        :param object filter_end_date_to: Filter by End Date (YYYY-MM-DD)
        :param object filter_property_class: Filter by Property Class
        :param object filter_unit: Filter by Unit Id
        :param object filter_tenant: Filter by Tenant Id
        :param object filter_outstanding_balance_greater_than: Filter by Min Outstanding Balance
        :param object filter_status: Filter by Status
        :param object filter_term: Filter by Term
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'filter_group', 'filter_property', 'filter_owner', 'filter_text', 'filter_start_date_from', 'filter_start_date_to', 'filter_end_date_from', 'filter_end_date_to', 'filter_property_class', 'filter_unit', 'filter_tenant', 'filter_outstanding_balance_greater_than', 'filter_status', 'filter_term']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_leases" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_leases`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter_group' in params:
            query_params.append(('filter_group', params['filter_group']))  # noqa: E501
        if 'filter_property' in params:
            query_params.append(('filter_property', params['filter_property']))  # noqa: E501
        if 'filter_owner' in params:
            query_params.append(('filter_owner', params['filter_owner']))  # noqa: E501
        if 'filter_text' in params:
            query_params.append(('filter_text', params['filter_text']))  # noqa: E501
        if 'filter_start_date_from' in params:
            query_params.append(('filter_start_date_from', params['filter_start_date_from']))  # noqa: E501
        if 'filter_start_date_to' in params:
            query_params.append(('filter_start_date_to', params['filter_start_date_to']))  # noqa: E501
        if 'filter_end_date_from' in params:
            query_params.append(('filter_end_date_from', params['filter_end_date_from']))  # noqa: E501
        if 'filter_end_date_to' in params:
            query_params.append(('filter_end_date_to', params['filter_end_date_to']))  # noqa: E501
        if 'filter_property_class' in params:
            query_params.append(('filter_propertyClass', params['filter_property_class']))  # noqa: E501
        if 'filter_unit' in params:
            query_params.append(('filter_unit', params['filter_unit']))  # noqa: E501
        if 'filter_tenant' in params:
            query_params.append(('filter_tenant', params['filter_tenant']))  # noqa: E501
        if 'filter_outstanding_balance_greater_than' in params:
            query_params.append(('filter_outstandingBalanceGreaterThan', params['filter_outstanding_balance_greater_than']))  # noqa: E501
        if 'filter_status' in params:
            query_params.append(('filter_status', params['filter_status']))  # noqa: E501
        if 'filter_term' in params:
            query_params.append(('filter_term', params['filter_term']))  # noqa: E501

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Key']  # noqa: E501

        return self.api_client.call_api(
            '/leases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_leases_move_in(self, **kwargs):  # noqa: E501
        """Move in Tenant  # noqa: E501

        Moves in a Tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_leases_move_in(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LeasesMoveinBody body:
        :return: Lease
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_leases_move_in_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_leases_move_in_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_leases_move_in_with_http_info(self, **kwargs):  # noqa: E501
        """Move in Tenant  # noqa: E501

        Moves in a Tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_leases_move_in_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LeasesMoveinBody body:
        :return: Lease
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_leases_move_in" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Key']  # noqa: E501

        return self.api_client.call_api(
            '/leases/move-in', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Lease',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_leases_move_out(self, **kwargs):  # noqa: E501
        """Move out Tenant  # noqa: E501

        Moves out a Tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_leases_move_out(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LeasesMoveoutBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_leases_move_out_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_leases_move_out_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_leases_move_out_with_http_info(self, **kwargs):  # noqa: E501
        """Move out Tenant  # noqa: E501

        Moves out a Tenant  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_leases_move_out_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LeasesMoveoutBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_leases_move_out" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Key']  # noqa: E501

        return self.api_client.call_api(
            '/leases/move-out', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
