# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UnitsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_unit(self, unit_id, **kwargs):  # noqa: E501
        """Retrieve a Unit  # noqa: E501

        Retrieves a Unit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unit(unit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object unit_id: The Unit Id (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_unit_with_http_info(unit_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_unit_with_http_info(unit_id, **kwargs)  # noqa: E501
            return data

    def get_unit_with_http_info(self, unit_id, **kwargs):  # noqa: E501
        """Retrieve a Unit  # noqa: E501

        Retrieves a Unit  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unit_with_http_info(unit_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object unit_id: The Unit Id (required)
        :return: Unit
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['unit_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'unit_id' is set
        if ('unit_id' not in params or
                params['unit_id'] is None):
            raise ValueError("Missing the required parameter `unit_id` when calling `get_unit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'unit_id' in params:
            path_params['unitId'] = params['unit_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Key']  # noqa: E501

        return self.api_client.call_api(
            '/units/{unitId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Unit',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_units(self, **kwargs):  # noqa: E501
        """List all Units  # noqa: E501

        Lists all Units  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_units(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object filter_group: Filters by Portfolio Id
        :param object filter_property: Filter by Property Id
        :param object filter_owner: Filter by Owner Id
        :param object filter_text: Filter by Unit Name
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_units_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_units_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_units_with_http_info(self, **kwargs):  # noqa: E501
        """List all Units  # noqa: E501

        Lists all Units  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_units_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object filter_group: Filters by Portfolio Id
        :param object filter_property: Filter by Property Id
        :param object filter_owner: Filter by Owner Id
        :param object filter_text: Filter by Unit Name
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter_group', 'filter_property', 'filter_owner', 'filter_text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_units" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter_group' in params:
            query_params.append(('filter_group', params['filter_group']))  # noqa: E501
        if 'filter_property' in params:
            query_params.append(('filter_property', params['filter_property']))  # noqa: E501
        if 'filter_owner' in params:
            query_params.append(('filter_owner', params['filter_owner']))  # noqa: E501
        if 'filter_text' in params:
            query_params.append(('filter_text', params['filter_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Key']  # noqa: E501

        return self.api_client.call_api(
            '/units', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
