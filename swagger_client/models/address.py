# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Address(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'street1': 'object',
        'street2': 'object',
        'city': 'object',
        'zip': 'object',
        'country': 'object',
        'lat': 'object',
        'lng': 'object'
    }

    attribute_map = {
        'street1': 'street1',
        'street2': 'street2',
        'city': 'city',
        'zip': 'zip',
        'country': 'country',
        'lat': 'lat',
        'lng': 'lng'
    }

    def __init__(self, street1=None, street2=None, city=None, zip=None, country=None, lat=None, lng=None):  # noqa: E501
        """Address - a model defined in Swagger"""  # noqa: E501
        self._street1 = None
        self._street2 = None
        self._city = None
        self._zip = None
        self._country = None
        self._lat = None
        self._lng = None
        self.discriminator = None
        if street1 is not None:
            self.street1 = street1
        if street2 is not None:
            self.street2 = street2
        if city is not None:
            self.city = city
        if zip is not None:
            self.zip = zip
        if country is not None:
            self.country = country
        if lat is not None:
            self.lat = lat
        if lng is not None:
            self.lng = lng

    @property
    def street1(self):
        """Gets the street1 of this Address.  # noqa: E501


        :return: The street1 of this Address.  # noqa: E501
        :rtype: object
        """
        return self._street1

    @street1.setter
    def street1(self, street1):
        """Sets the street1 of this Address.


        :param street1: The street1 of this Address.  # noqa: E501
        :type: object
        """

        self._street1 = street1

    @property
    def street2(self):
        """Gets the street2 of this Address.  # noqa: E501


        :return: The street2 of this Address.  # noqa: E501
        :rtype: object
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this Address.


        :param street2: The street2 of this Address.  # noqa: E501
        :type: object
        """

        self._street2 = street2

    @property
    def city(self):
        """Gets the city of this Address.  # noqa: E501


        :return: The city of this Address.  # noqa: E501
        :rtype: object
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.


        :param city: The city of this Address.  # noqa: E501
        :type: object
        """

        self._city = city

    @property
    def zip(self):
        """Gets the zip of this Address.  # noqa: E501


        :return: The zip of this Address.  # noqa: E501
        :rtype: object
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this Address.


        :param zip: The zip of this Address.  # noqa: E501
        :type: object
        """

        self._zip = zip

    @property
    def country(self):
        """Gets the country of this Address.  # noqa: E501


        :return: The country of this Address.  # noqa: E501
        :rtype: object
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.


        :param country: The country of this Address.  # noqa: E501
        :type: object
        """

        self._country = country

    @property
    def lat(self):
        """Gets the lat of this Address.  # noqa: E501


        :return: The lat of this Address.  # noqa: E501
        :rtype: object
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Address.


        :param lat: The lat of this Address.  # noqa: E501
        :type: object
        """

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this Address.  # noqa: E501


        :return: The lng of this Address.  # noqa: E501
        :rtype: object
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this Address.


        :param lng: The lng of this Address.  # noqa: E501
        :type: object
        """

        self._lng = lng

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Address, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Address):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
