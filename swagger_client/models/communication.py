# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Communication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'MongoId',
        'subject': 'object',
        'body_html': 'object',
        'body_preview': 'object',
        '_from': 'CommunicationParticipant',
        'to': 'object',
        'cc': 'object',
        'bcc': 'object',
        'sent_at': 'object',
        'type': 'object',
        'thread_id': 'object',
        'external_id': 'object',
        'opened_at': 'object',
        'clicked_at': 'object',
        'bounced_at': 'object',
        'status': 'object',
        'announcement': 'MongoId'
    }

    attribute_map = {
        'id': 'id',
        'subject': 'subject',
        'body_html': 'bodyHtml',
        'body_preview': 'bodyPreview',
        '_from': 'from',
        'to': 'to',
        'cc': 'cc',
        'bcc': 'bcc',
        'sent_at': 'sentAt',
        'type': 'type',
        'thread_id': 'threadId',
        'external_id': 'externalId',
        'opened_at': 'openedAt',
        'clicked_at': 'clickedAt',
        'bounced_at': 'bouncedAt',
        'status': 'status',
        'announcement': 'announcement'
    }

    def __init__(self, id=None, subject=None, body_html=None, body_preview=None, _from=None, to=None, cc=None, bcc=None, sent_at=None, type=None, thread_id=None, external_id=None, opened_at=None, clicked_at=None, bounced_at=None, status=None, announcement=None):  # noqa: E501
        """Communication - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._subject = None
        self._body_html = None
        self._body_preview = None
        self.__from = None
        self._to = None
        self._cc = None
        self._bcc = None
        self._sent_at = None
        self._type = None
        self._thread_id = None
        self._external_id = None
        self._opened_at = None
        self._clicked_at = None
        self._bounced_at = None
        self._status = None
        self._announcement = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.subject = subject
        if body_html is not None:
            self.body_html = body_html
        if body_preview is not None:
            self.body_preview = body_preview
        self._from = _from
        if to is not None:
            self.to = to
        if cc is not None:
            self.cc = cc
        if bcc is not None:
            self.bcc = bcc
        self.sent_at = sent_at
        self.type = type
        if thread_id is not None:
            self.thread_id = thread_id
        if external_id is not None:
            self.external_id = external_id
        if opened_at is not None:
            self.opened_at = opened_at
        if clicked_at is not None:
            self.clicked_at = clicked_at
        if bounced_at is not None:
            self.bounced_at = bounced_at
        self.status = status
        if announcement is not None:
            self.announcement = announcement

    @property
    def id(self):
        """Gets the id of this Communication.  # noqa: E501


        :return: The id of this Communication.  # noqa: E501
        :rtype: MongoId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Communication.


        :param id: The id of this Communication.  # noqa: E501
        :type: MongoId
        """

        self._id = id

    @property
    def subject(self):
        """Gets the subject of this Communication.  # noqa: E501


        :return: The subject of this Communication.  # noqa: E501
        :rtype: object
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Communication.


        :param subject: The subject of this Communication.  # noqa: E501
        :type: object
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def body_html(self):
        """Gets the body_html of this Communication.  # noqa: E501

        For performance reasons, bodyHtml will only be returned when retrieving a single communication  # noqa: E501

        :return: The body_html of this Communication.  # noqa: E501
        :rtype: object
        """
        return self._body_html

    @body_html.setter
    def body_html(self, body_html):
        """Sets the body_html of this Communication.

        For performance reasons, bodyHtml will only be returned when retrieving a single communication  # noqa: E501

        :param body_html: The body_html of this Communication.  # noqa: E501
        :type: object
        """

        self._body_html = body_html

    @property
    def body_preview(self):
        """Gets the body_preview of this Communication.  # noqa: E501


        :return: The body_preview of this Communication.  # noqa: E501
        :rtype: object
        """
        return self._body_preview

    @body_preview.setter
    def body_preview(self, body_preview):
        """Sets the body_preview of this Communication.


        :param body_preview: The body_preview of this Communication.  # noqa: E501
        :type: object
        """

        self._body_preview = body_preview

    @property
    def _from(self):
        """Gets the _from of this Communication.  # noqa: E501


        :return: The _from of this Communication.  # noqa: E501
        :rtype: CommunicationParticipant
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Communication.


        :param _from: The _from of this Communication.  # noqa: E501
        :type: CommunicationParticipant
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this Communication.  # noqa: E501


        :return: The to of this Communication.  # noqa: E501
        :rtype: object
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Communication.


        :param to: The to of this Communication.  # noqa: E501
        :type: object
        """

        self._to = to

    @property
    def cc(self):
        """Gets the cc of this Communication.  # noqa: E501


        :return: The cc of this Communication.  # noqa: E501
        :rtype: object
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this Communication.


        :param cc: The cc of this Communication.  # noqa: E501
        :type: object
        """

        self._cc = cc

    @property
    def bcc(self):
        """Gets the bcc of this Communication.  # noqa: E501


        :return: The bcc of this Communication.  # noqa: E501
        :rtype: object
        """
        return self._bcc

    @bcc.setter
    def bcc(self, bcc):
        """Sets the bcc of this Communication.


        :param bcc: The bcc of this Communication.  # noqa: E501
        :type: object
        """

        self._bcc = bcc

    @property
    def sent_at(self):
        """Gets the sent_at of this Communication.  # noqa: E501


        :return: The sent_at of this Communication.  # noqa: E501
        :rtype: object
        """
        return self._sent_at

    @sent_at.setter
    def sent_at(self, sent_at):
        """Sets the sent_at of this Communication.


        :param sent_at: The sent_at of this Communication.  # noqa: E501
        :type: object
        """
        if sent_at is None:
            raise ValueError("Invalid value for `sent_at`, must not be `None`")  # noqa: E501

        self._sent_at = sent_at

    @property
    def type(self):
        """Gets the type of this Communication.  # noqa: E501


        :return: The type of this Communication.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Communication.


        :param type: The type of this Communication.  # noqa: E501
        :type: object
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def thread_id(self):
        """Gets the thread_id of this Communication.  # noqa: E501


        :return: The thread_id of this Communication.  # noqa: E501
        :rtype: object
        """
        return self._thread_id

    @thread_id.setter
    def thread_id(self, thread_id):
        """Sets the thread_id of this Communication.


        :param thread_id: The thread_id of this Communication.  # noqa: E501
        :type: object
        """

        self._thread_id = thread_id

    @property
    def external_id(self):
        """Gets the external_id of this Communication.  # noqa: E501


        :return: The external_id of this Communication.  # noqa: E501
        :rtype: object
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Communication.


        :param external_id: The external_id of this Communication.  # noqa: E501
        :type: object
        """

        self._external_id = external_id

    @property
    def opened_at(self):
        """Gets the opened_at of this Communication.  # noqa: E501


        :return: The opened_at of this Communication.  # noqa: E501
        :rtype: object
        """
        return self._opened_at

    @opened_at.setter
    def opened_at(self, opened_at):
        """Sets the opened_at of this Communication.


        :param opened_at: The opened_at of this Communication.  # noqa: E501
        :type: object
        """

        self._opened_at = opened_at

    @property
    def clicked_at(self):
        """Gets the clicked_at of this Communication.  # noqa: E501


        :return: The clicked_at of this Communication.  # noqa: E501
        :rtype: object
        """
        return self._clicked_at

    @clicked_at.setter
    def clicked_at(self, clicked_at):
        """Sets the clicked_at of this Communication.


        :param clicked_at: The clicked_at of this Communication.  # noqa: E501
        :type: object
        """

        self._clicked_at = clicked_at

    @property
    def bounced_at(self):
        """Gets the bounced_at of this Communication.  # noqa: E501


        :return: The bounced_at of this Communication.  # noqa: E501
        :rtype: object
        """
        return self._bounced_at

    @bounced_at.setter
    def bounced_at(self, bounced_at):
        """Sets the bounced_at of this Communication.


        :param bounced_at: The bounced_at of this Communication.  # noqa: E501
        :type: object
        """

        self._bounced_at = bounced_at

    @property
    def status(self):
        """Gets the status of this Communication.  # noqa: E501


        :return: The status of this Communication.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Communication.


        :param status: The status of this Communication.  # noqa: E501
        :type: object
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def announcement(self):
        """Gets the announcement of this Communication.  # noqa: E501


        :return: The announcement of this Communication.  # noqa: E501
        :rtype: MongoId
        """
        return self._announcement

    @announcement.setter
    def announcement(self, announcement):
        """Sets the announcement of this Communication.


        :param announcement: The announcement of this Communication.  # noqa: E501
        :type: MongoId
        """

        self._announcement = announcement

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Communication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Communication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
