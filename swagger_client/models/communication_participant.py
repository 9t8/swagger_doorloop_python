# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommunicationParticipant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'object',
        'address': 'object',
        'linked_to_type': 'object',
        'linked_to_id': 'MongoId'
    }

    attribute_map = {
        'display_name': 'displayName',
        'address': 'address',
        'linked_to_type': 'linkedToType',
        'linked_to_id': 'linkedToId'
    }

    def __init__(self, display_name=None, address=None, linked_to_type=None, linked_to_id=None):  # noqa: E501
        """CommunicationParticipant - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._address = None
        self._linked_to_type = None
        self._linked_to_id = None
        self.discriminator = None
        if display_name is not None:
            self.display_name = display_name
        self.address = address
        self.linked_to_type = linked_to_type
        self.linked_to_id = linked_to_id

    @property
    def display_name(self):
        """Gets the display_name of this CommunicationParticipant.  # noqa: E501


        :return: The display_name of this CommunicationParticipant.  # noqa: E501
        :rtype: object
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CommunicationParticipant.


        :param display_name: The display_name of this CommunicationParticipant.  # noqa: E501
        :type: object
        """

        self._display_name = display_name

    @property
    def address(self):
        """Gets the address of this CommunicationParticipant.  # noqa: E501


        :return: The address of this CommunicationParticipant.  # noqa: E501
        :rtype: object
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CommunicationParticipant.


        :param address: The address of this CommunicationParticipant.  # noqa: E501
        :type: object
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def linked_to_type(self):
        """Gets the linked_to_type of this CommunicationParticipant.  # noqa: E501


        :return: The linked_to_type of this CommunicationParticipant.  # noqa: E501
        :rtype: object
        """
        return self._linked_to_type

    @linked_to_type.setter
    def linked_to_type(self, linked_to_type):
        """Sets the linked_to_type of this CommunicationParticipant.


        :param linked_to_type: The linked_to_type of this CommunicationParticipant.  # noqa: E501
        :type: object
        """
        if linked_to_type is None:
            raise ValueError("Invalid value for `linked_to_type`, must not be `None`")  # noqa: E501

        self._linked_to_type = linked_to_type

    @property
    def linked_to_id(self):
        """Gets the linked_to_id of this CommunicationParticipant.  # noqa: E501


        :return: The linked_to_id of this CommunicationParticipant.  # noqa: E501
        :rtype: MongoId
        """
        return self._linked_to_id

    @linked_to_id.setter
    def linked_to_id(self, linked_to_id):
        """Sets the linked_to_id of this CommunicationParticipant.


        :param linked_to_id: The linked_to_id of this CommunicationParticipant.  # noqa: E501
        :type: MongoId
        """
        if linked_to_id is None:
            raise ValueError("Invalid value for `linked_to_id`, must not be `None`")  # noqa: E501

        self._linked_to_id = linked_to_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommunicationParticipant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommunicationParticipant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
