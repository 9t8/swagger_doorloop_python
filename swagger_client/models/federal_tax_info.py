# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FederalTaxInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_for1099_same_as_primary_address': 'object',
        'address_for1099': 'Address',
        'taxpayer_name': 'object',
        'taxpayer_id': 'object'
    }

    attribute_map = {
        'address_for1099_same_as_primary_address': 'addressFor1099SameAsPrimaryAddress',
        'address_for1099': 'addressFor1099',
        'taxpayer_name': 'taxpayerName',
        'taxpayer_id': 'taxpayerId'
    }

    def __init__(self, address_for1099_same_as_primary_address=None, address_for1099=None, taxpayer_name=None, taxpayer_id=None):  # noqa: E501
        """FederalTaxInfo - a model defined in Swagger"""  # noqa: E501
        self._address_for1099_same_as_primary_address = None
        self._address_for1099 = None
        self._taxpayer_name = None
        self._taxpayer_id = None
        self.discriminator = None
        self.address_for1099_same_as_primary_address = address_for1099_same_as_primary_address
        if address_for1099 is not None:
            self.address_for1099 = address_for1099
        self.taxpayer_name = taxpayer_name
        self.taxpayer_id = taxpayer_id

    @property
    def address_for1099_same_as_primary_address(self):
        """Gets the address_for1099_same_as_primary_address of this FederalTaxInfo.  # noqa: E501

        If set to \"true\", will use the primaryAddress on the 1099 form. Otherwise addressFor1099 will be required.  # noqa: E501

        :return: The address_for1099_same_as_primary_address of this FederalTaxInfo.  # noqa: E501
        :rtype: object
        """
        return self._address_for1099_same_as_primary_address

    @address_for1099_same_as_primary_address.setter
    def address_for1099_same_as_primary_address(self, address_for1099_same_as_primary_address):
        """Sets the address_for1099_same_as_primary_address of this FederalTaxInfo.

        If set to \"true\", will use the primaryAddress on the 1099 form. Otherwise addressFor1099 will be required.  # noqa: E501

        :param address_for1099_same_as_primary_address: The address_for1099_same_as_primary_address of this FederalTaxInfo.  # noqa: E501
        :type: object
        """
        if address_for1099_same_as_primary_address is None:
            raise ValueError("Invalid value for `address_for1099_same_as_primary_address`, must not be `None`")  # noqa: E501

        self._address_for1099_same_as_primary_address = address_for1099_same_as_primary_address

    @property
    def address_for1099(self):
        """Gets the address_for1099 of this FederalTaxInfo.  # noqa: E501


        :return: The address_for1099 of this FederalTaxInfo.  # noqa: E501
        :rtype: Address
        """
        return self._address_for1099

    @address_for1099.setter
    def address_for1099(self, address_for1099):
        """Sets the address_for1099 of this FederalTaxInfo.


        :param address_for1099: The address_for1099 of this FederalTaxInfo.  # noqa: E501
        :type: Address
        """

        self._address_for1099 = address_for1099

    @property
    def taxpayer_name(self):
        """Gets the taxpayer_name of this FederalTaxInfo.  # noqa: E501


        :return: The taxpayer_name of this FederalTaxInfo.  # noqa: E501
        :rtype: object
        """
        return self._taxpayer_name

    @taxpayer_name.setter
    def taxpayer_name(self, taxpayer_name):
        """Sets the taxpayer_name of this FederalTaxInfo.


        :param taxpayer_name: The taxpayer_name of this FederalTaxInfo.  # noqa: E501
        :type: object
        """
        if taxpayer_name is None:
            raise ValueError("Invalid value for `taxpayer_name`, must not be `None`")  # noqa: E501

        self._taxpayer_name = taxpayer_name

    @property
    def taxpayer_id(self):
        """Gets the taxpayer_id of this FederalTaxInfo.  # noqa: E501


        :return: The taxpayer_id of this FederalTaxInfo.  # noqa: E501
        :rtype: object
        """
        return self._taxpayer_id

    @taxpayer_id.setter
    def taxpayer_id(self, taxpayer_id):
        """Sets the taxpayer_id of this FederalTaxInfo.


        :param taxpayer_id: The taxpayer_id of this FederalTaxInfo.  # noqa: E501
        :type: object
        """
        if taxpayer_id is None:
            raise ValueError("Invalid value for `taxpayer_id`, must not be `None`")  # noqa: E501

        self._taxpayer_id = taxpayer_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FederalTaxInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FederalTaxInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
