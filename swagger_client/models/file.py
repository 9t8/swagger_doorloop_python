# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class File(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'MongoId',
        'name': 'object',
        'notes': 'object',
        'linked_resource': 'FileLinkedResource',
        'tags': 'object',
        'size': 'object',
        'mime_type': 'object',
        'created_by': 'object',
        'created_at': 'object',
        'download_url': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'notes': 'notes',
        'linked_resource': 'linkedResource',
        'tags': 'tags',
        'size': 'size',
        'mime_type': 'mimeType',
        'created_by': 'createdBy',
        'created_at': 'createdAt',
        'download_url': 'downloadUrl'
    }

    def __init__(self, id=None, name=None, notes=None, linked_resource=None, tags=None, size=None, mime_type=None, created_by=None, created_at=None, download_url=None):  # noqa: E501
        """File - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._notes = None
        self._linked_resource = None
        self._tags = None
        self._size = None
        self._mime_type = None
        self._created_by = None
        self._created_at = None
        self._download_url = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        if notes is not None:
            self.notes = notes
        self.linked_resource = linked_resource
        if tags is not None:
            self.tags = tags
        if size is not None:
            self.size = size
        if mime_type is not None:
            self.mime_type = mime_type
        if created_by is not None:
            self.created_by = created_by
        if created_at is not None:
            self.created_at = created_at
        if download_url is not None:
            self.download_url = download_url

    @property
    def id(self):
        """Gets the id of this File.  # noqa: E501


        :return: The id of this File.  # noqa: E501
        :rtype: MongoId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this File.


        :param id: The id of this File.  # noqa: E501
        :type: MongoId
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this File.  # noqa: E501

        The name of the file. Must be a valid unix file name.  # noqa: E501

        :return: The name of this File.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this File.

        The name of the file. Must be a valid unix file name.  # noqa: E501

        :param name: The name of this File.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this File.  # noqa: E501


        :return: The notes of this File.  # noqa: E501
        :rtype: object
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this File.


        :param notes: The notes of this File.  # noqa: E501
        :type: object
        """

        self._notes = notes

    @property
    def linked_resource(self):
        """Gets the linked_resource of this File.  # noqa: E501


        :return: The linked_resource of this File.  # noqa: E501
        :rtype: FileLinkedResource
        """
        return self._linked_resource

    @linked_resource.setter
    def linked_resource(self, linked_resource):
        """Sets the linked_resource of this File.


        :param linked_resource: The linked_resource of this File.  # noqa: E501
        :type: FileLinkedResource
        """
        if linked_resource is None:
            raise ValueError("Invalid value for `linked_resource`, must not be `None`")  # noqa: E501

        self._linked_resource = linked_resource

    @property
    def tags(self):
        """Gets the tags of this File.  # noqa: E501


        :return: The tags of this File.  # noqa: E501
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this File.


        :param tags: The tags of this File.  # noqa: E501
        :type: object
        """

        self._tags = tags

    @property
    def size(self):
        """Gets the size of this File.  # noqa: E501


        :return: The size of this File.  # noqa: E501
        :rtype: object
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this File.


        :param size: The size of this File.  # noqa: E501
        :type: object
        """

        self._size = size

    @property
    def mime_type(self):
        """Gets the mime_type of this File.  # noqa: E501


        :return: The mime_type of this File.  # noqa: E501
        :rtype: object
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this File.


        :param mime_type: The mime_type of this File.  # noqa: E501
        :type: object
        """

        self._mime_type = mime_type

    @property
    def created_by(self):
        """Gets the created_by of this File.  # noqa: E501


        :return: The created_by of this File.  # noqa: E501
        :rtype: object
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this File.


        :param created_by: The created_by of this File.  # noqa: E501
        :type: object
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this File.  # noqa: E501


        :return: The created_at of this File.  # noqa: E501
        :rtype: object
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this File.


        :param created_at: The created_at of this File.  # noqa: E501
        :type: object
        """

        self._created_at = created_at

    @property
    def download_url(self):
        """Gets the download_url of this File.  # noqa: E501

        Read Only. References the URL from which this file can be downloaded  # noqa: E501

        :return: The download_url of this File.  # noqa: E501
        :rtype: object
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this File.

        Read Only. References the URL from which this file can be downloaded  # noqa: E501

        :param download_url: The download_url of this File.  # noqa: E501
        :type: object
        """

        self._download_url = download_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(File, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, File):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
