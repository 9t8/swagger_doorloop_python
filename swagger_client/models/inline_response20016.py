# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20016(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'object',
        'unit_id': 'object',
        'unit_name': 'object',
        'unit_amenities': 'object',
        'beds': 'object',
        'baths': 'object',
        'size': 'object',
        'beds_and_baths': 'object',
        'market_rent': 'object',
        '_property': 'MongoId',
        'pictures': 'object',
        'occupied': 'object',
        'lease_id': 'MongoId',
        'lease_name': 'object',
        'start': 'object',
        'end': 'object',
        'term': 'object',
        'total_recurring_rent': 'object',
        'rent_per_size': 'object',
        'total_balance_due': 'object',
        'lease_status': 'object',
        'total_deposits_held': 'object',
        'renewal_stage': 'object',
        'total_recurring_charges': 'object',
        'total_recurring_credits': 'object',
        'total_recurring_payments': 'object',
        'last_payment_date': 'object',
        'last_payment_amount': 'object',
        'last_returned_payment_date': 'object',
        'last_returned_payment_amount': 'object',
        'next_lease_id': 'MongoId',
        'next_lease_name': 'object',
        'next_lease_start': 'object',
        'rollover_to_at_will': 'object'
    }

    attribute_map = {
        'active': 'active',
        'unit_id': 'unitId',
        'unit_name': 'unitName',
        'unit_amenities': 'unitAmenities',
        'beds': 'beds',
        'baths': 'baths',
        'size': 'size',
        'beds_and_baths': 'bedsAndBaths',
        'market_rent': 'marketRent',
        '_property': 'property',
        'pictures': 'pictures',
        'occupied': 'occupied',
        'lease_id': 'leaseId',
        'lease_name': 'leaseName',
        'start': 'start',
        'end': 'end',
        'term': 'term',
        'total_recurring_rent': 'totalRecurringRent',
        'rent_per_size': 'rentPerSize',
        'total_balance_due': 'totalBalanceDue',
        'lease_status': 'leaseStatus',
        'total_deposits_held': 'totalDepositsHeld',
        'renewal_stage': 'renewalStage',
        'total_recurring_charges': 'totalRecurringCharges',
        'total_recurring_credits': 'totalRecurringCredits',
        'total_recurring_payments': 'totalRecurringPayments',
        'last_payment_date': 'lastPaymentDate',
        'last_payment_amount': 'lastPaymentAmount',
        'last_returned_payment_date': 'lastReturnedPaymentDate',
        'last_returned_payment_amount': 'lastReturnedPaymentAmount',
        'next_lease_id': 'nextLeaseId',
        'next_lease_name': 'nextLeaseName',
        'next_lease_start': 'nextLeaseStart',
        'rollover_to_at_will': 'rolloverToAtWill'
    }

    def __init__(self, active=None, unit_id=None, unit_name=None, unit_amenities=None, beds=None, baths=None, size=None, beds_and_baths=None, market_rent=None, _property=None, pictures=None, occupied=None, lease_id=None, lease_name=None, start=None, end=None, term=None, total_recurring_rent=None, rent_per_size=None, total_balance_due=None, lease_status=None, total_deposits_held=None, renewal_stage=None, total_recurring_charges=None, total_recurring_credits=None, total_recurring_payments=None, last_payment_date=None, last_payment_amount=None, last_returned_payment_date=None, last_returned_payment_amount=None, next_lease_id=None, next_lease_name=None, next_lease_start=None, rollover_to_at_will=None):  # noqa: E501
        """InlineResponse20016 - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._unit_id = None
        self._unit_name = None
        self._unit_amenities = None
        self._beds = None
        self._baths = None
        self._size = None
        self._beds_and_baths = None
        self._market_rent = None
        self.__property = None
        self._pictures = None
        self._occupied = None
        self._lease_id = None
        self._lease_name = None
        self._start = None
        self._end = None
        self._term = None
        self._total_recurring_rent = None
        self._rent_per_size = None
        self._total_balance_due = None
        self._lease_status = None
        self._total_deposits_held = None
        self._renewal_stage = None
        self._total_recurring_charges = None
        self._total_recurring_credits = None
        self._total_recurring_payments = None
        self._last_payment_date = None
        self._last_payment_amount = None
        self._last_returned_payment_date = None
        self._last_returned_payment_amount = None
        self._next_lease_id = None
        self._next_lease_name = None
        self._next_lease_start = None
        self._rollover_to_at_will = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if unit_id is not None:
            self.unit_id = unit_id
        if unit_name is not None:
            self.unit_name = unit_name
        if unit_amenities is not None:
            self.unit_amenities = unit_amenities
        if beds is not None:
            self.beds = beds
        if baths is not None:
            self.baths = baths
        if size is not None:
            self.size = size
        if beds_and_baths is not None:
            self.beds_and_baths = beds_and_baths
        if market_rent is not None:
            self.market_rent = market_rent
        if _property is not None:
            self._property = _property
        if pictures is not None:
            self.pictures = pictures
        if occupied is not None:
            self.occupied = occupied
        if lease_id is not None:
            self.lease_id = lease_id
        if lease_name is not None:
            self.lease_name = lease_name
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if term is not None:
            self.term = term
        if total_recurring_rent is not None:
            self.total_recurring_rent = total_recurring_rent
        if rent_per_size is not None:
            self.rent_per_size = rent_per_size
        if total_balance_due is not None:
            self.total_balance_due = total_balance_due
        if lease_status is not None:
            self.lease_status = lease_status
        if total_deposits_held is not None:
            self.total_deposits_held = total_deposits_held
        if renewal_stage is not None:
            self.renewal_stage = renewal_stage
        if total_recurring_charges is not None:
            self.total_recurring_charges = total_recurring_charges
        if total_recurring_credits is not None:
            self.total_recurring_credits = total_recurring_credits
        if total_recurring_payments is not None:
            self.total_recurring_payments = total_recurring_payments
        if last_payment_date is not None:
            self.last_payment_date = last_payment_date
        if last_payment_amount is not None:
            self.last_payment_amount = last_payment_amount
        if last_returned_payment_date is not None:
            self.last_returned_payment_date = last_returned_payment_date
        if last_returned_payment_amount is not None:
            self.last_returned_payment_amount = last_returned_payment_amount
        if next_lease_id is not None:
            self.next_lease_id = next_lease_id
        if next_lease_name is not None:
            self.next_lease_name = next_lease_name
        if next_lease_start is not None:
            self.next_lease_start = next_lease_start
        if rollover_to_at_will is not None:
            self.rollover_to_at_will = rollover_to_at_will

    @property
    def active(self):
        """Gets the active of this InlineResponse20016.  # noqa: E501


        :return: The active of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this InlineResponse20016.


        :param active: The active of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._active = active

    @property
    def unit_id(self):
        """Gets the unit_id of this InlineResponse20016.  # noqa: E501


        :return: The unit_id of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._unit_id

    @unit_id.setter
    def unit_id(self, unit_id):
        """Sets the unit_id of this InlineResponse20016.


        :param unit_id: The unit_id of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._unit_id = unit_id

    @property
    def unit_name(self):
        """Gets the unit_name of this InlineResponse20016.  # noqa: E501


        :return: The unit_name of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._unit_name

    @unit_name.setter
    def unit_name(self, unit_name):
        """Sets the unit_name of this InlineResponse20016.


        :param unit_name: The unit_name of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._unit_name = unit_name

    @property
    def unit_amenities(self):
        """Gets the unit_amenities of this InlineResponse20016.  # noqa: E501


        :return: The unit_amenities of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._unit_amenities

    @unit_amenities.setter
    def unit_amenities(self, unit_amenities):
        """Sets the unit_amenities of this InlineResponse20016.


        :param unit_amenities: The unit_amenities of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._unit_amenities = unit_amenities

    @property
    def beds(self):
        """Gets the beds of this InlineResponse20016.  # noqa: E501


        :return: The beds of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._beds

    @beds.setter
    def beds(self, beds):
        """Sets the beds of this InlineResponse20016.


        :param beds: The beds of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._beds = beds

    @property
    def baths(self):
        """Gets the baths of this InlineResponse20016.  # noqa: E501


        :return: The baths of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._baths

    @baths.setter
    def baths(self, baths):
        """Sets the baths of this InlineResponse20016.


        :param baths: The baths of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._baths = baths

    @property
    def size(self):
        """Gets the size of this InlineResponse20016.  # noqa: E501


        :return: The size of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this InlineResponse20016.


        :param size: The size of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._size = size

    @property
    def beds_and_baths(self):
        """Gets the beds_and_baths of this InlineResponse20016.  # noqa: E501


        :return: The beds_and_baths of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._beds_and_baths

    @beds_and_baths.setter
    def beds_and_baths(self, beds_and_baths):
        """Sets the beds_and_baths of this InlineResponse20016.


        :param beds_and_baths: The beds_and_baths of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._beds_and_baths = beds_and_baths

    @property
    def market_rent(self):
        """Gets the market_rent of this InlineResponse20016.  # noqa: E501


        :return: The market_rent of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._market_rent

    @market_rent.setter
    def market_rent(self, market_rent):
        """Sets the market_rent of this InlineResponse20016.


        :param market_rent: The market_rent of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._market_rent = market_rent

    @property
    def _property(self):
        """Gets the _property of this InlineResponse20016.  # noqa: E501


        :return: The _property of this InlineResponse20016.  # noqa: E501
        :rtype: MongoId
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this InlineResponse20016.


        :param _property: The _property of this InlineResponse20016.  # noqa: E501
        :type: MongoId
        """

        self.__property = _property

    @property
    def pictures(self):
        """Gets the pictures of this InlineResponse20016.  # noqa: E501


        :return: The pictures of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this InlineResponse20016.


        :param pictures: The pictures of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._pictures = pictures

    @property
    def occupied(self):
        """Gets the occupied of this InlineResponse20016.  # noqa: E501


        :return: The occupied of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._occupied

    @occupied.setter
    def occupied(self, occupied):
        """Sets the occupied of this InlineResponse20016.


        :param occupied: The occupied of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._occupied = occupied

    @property
    def lease_id(self):
        """Gets the lease_id of this InlineResponse20016.  # noqa: E501


        :return: The lease_id of this InlineResponse20016.  # noqa: E501
        :rtype: MongoId
        """
        return self._lease_id

    @lease_id.setter
    def lease_id(self, lease_id):
        """Sets the lease_id of this InlineResponse20016.


        :param lease_id: The lease_id of this InlineResponse20016.  # noqa: E501
        :type: MongoId
        """

        self._lease_id = lease_id

    @property
    def lease_name(self):
        """Gets the lease_name of this InlineResponse20016.  # noqa: E501


        :return: The lease_name of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._lease_name

    @lease_name.setter
    def lease_name(self, lease_name):
        """Sets the lease_name of this InlineResponse20016.


        :param lease_name: The lease_name of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._lease_name = lease_name

    @property
    def start(self):
        """Gets the start of this InlineResponse20016.  # noqa: E501


        :return: The start of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this InlineResponse20016.


        :param start: The start of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this InlineResponse20016.  # noqa: E501


        :return: The end of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this InlineResponse20016.


        :param end: The end of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._end = end

    @property
    def term(self):
        """Gets the term of this InlineResponse20016.  # noqa: E501


        :return: The term of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this InlineResponse20016.


        :param term: The term of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._term = term

    @property
    def total_recurring_rent(self):
        """Gets the total_recurring_rent of this InlineResponse20016.  # noqa: E501


        :return: The total_recurring_rent of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._total_recurring_rent

    @total_recurring_rent.setter
    def total_recurring_rent(self, total_recurring_rent):
        """Sets the total_recurring_rent of this InlineResponse20016.


        :param total_recurring_rent: The total_recurring_rent of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._total_recurring_rent = total_recurring_rent

    @property
    def rent_per_size(self):
        """Gets the rent_per_size of this InlineResponse20016.  # noqa: E501


        :return: The rent_per_size of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._rent_per_size

    @rent_per_size.setter
    def rent_per_size(self, rent_per_size):
        """Sets the rent_per_size of this InlineResponse20016.


        :param rent_per_size: The rent_per_size of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._rent_per_size = rent_per_size

    @property
    def total_balance_due(self):
        """Gets the total_balance_due of this InlineResponse20016.  # noqa: E501


        :return: The total_balance_due of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._total_balance_due

    @total_balance_due.setter
    def total_balance_due(self, total_balance_due):
        """Sets the total_balance_due of this InlineResponse20016.


        :param total_balance_due: The total_balance_due of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._total_balance_due = total_balance_due

    @property
    def lease_status(self):
        """Gets the lease_status of this InlineResponse20016.  # noqa: E501


        :return: The lease_status of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._lease_status

    @lease_status.setter
    def lease_status(self, lease_status):
        """Sets the lease_status of this InlineResponse20016.


        :param lease_status: The lease_status of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._lease_status = lease_status

    @property
    def total_deposits_held(self):
        """Gets the total_deposits_held of this InlineResponse20016.  # noqa: E501


        :return: The total_deposits_held of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._total_deposits_held

    @total_deposits_held.setter
    def total_deposits_held(self, total_deposits_held):
        """Sets the total_deposits_held of this InlineResponse20016.


        :param total_deposits_held: The total_deposits_held of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._total_deposits_held = total_deposits_held

    @property
    def renewal_stage(self):
        """Gets the renewal_stage of this InlineResponse20016.  # noqa: E501


        :return: The renewal_stage of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._renewal_stage

    @renewal_stage.setter
    def renewal_stage(self, renewal_stage):
        """Sets the renewal_stage of this InlineResponse20016.


        :param renewal_stage: The renewal_stage of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._renewal_stage = renewal_stage

    @property
    def total_recurring_charges(self):
        """Gets the total_recurring_charges of this InlineResponse20016.  # noqa: E501


        :return: The total_recurring_charges of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._total_recurring_charges

    @total_recurring_charges.setter
    def total_recurring_charges(self, total_recurring_charges):
        """Sets the total_recurring_charges of this InlineResponse20016.


        :param total_recurring_charges: The total_recurring_charges of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._total_recurring_charges = total_recurring_charges

    @property
    def total_recurring_credits(self):
        """Gets the total_recurring_credits of this InlineResponse20016.  # noqa: E501


        :return: The total_recurring_credits of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._total_recurring_credits

    @total_recurring_credits.setter
    def total_recurring_credits(self, total_recurring_credits):
        """Sets the total_recurring_credits of this InlineResponse20016.


        :param total_recurring_credits: The total_recurring_credits of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._total_recurring_credits = total_recurring_credits

    @property
    def total_recurring_payments(self):
        """Gets the total_recurring_payments of this InlineResponse20016.  # noqa: E501


        :return: The total_recurring_payments of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._total_recurring_payments

    @total_recurring_payments.setter
    def total_recurring_payments(self, total_recurring_payments):
        """Sets the total_recurring_payments of this InlineResponse20016.


        :param total_recurring_payments: The total_recurring_payments of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._total_recurring_payments = total_recurring_payments

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this InlineResponse20016.  # noqa: E501

        Format: YYYY-MM-DD  # noqa: E501

        :return: The last_payment_date of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this InlineResponse20016.

        Format: YYYY-MM-DD  # noqa: E501

        :param last_payment_date: The last_payment_date of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._last_payment_date = last_payment_date

    @property
    def last_payment_amount(self):
        """Gets the last_payment_amount of this InlineResponse20016.  # noqa: E501


        :return: The last_payment_amount of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._last_payment_amount

    @last_payment_amount.setter
    def last_payment_amount(self, last_payment_amount):
        """Sets the last_payment_amount of this InlineResponse20016.


        :param last_payment_amount: The last_payment_amount of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._last_payment_amount = last_payment_amount

    @property
    def last_returned_payment_date(self):
        """Gets the last_returned_payment_date of this InlineResponse20016.  # noqa: E501

        Format: YYYY-MM-DD  # noqa: E501

        :return: The last_returned_payment_date of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._last_returned_payment_date

    @last_returned_payment_date.setter
    def last_returned_payment_date(self, last_returned_payment_date):
        """Sets the last_returned_payment_date of this InlineResponse20016.

        Format: YYYY-MM-DD  # noqa: E501

        :param last_returned_payment_date: The last_returned_payment_date of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._last_returned_payment_date = last_returned_payment_date

    @property
    def last_returned_payment_amount(self):
        """Gets the last_returned_payment_amount of this InlineResponse20016.  # noqa: E501


        :return: The last_returned_payment_amount of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._last_returned_payment_amount

    @last_returned_payment_amount.setter
    def last_returned_payment_amount(self, last_returned_payment_amount):
        """Sets the last_returned_payment_amount of this InlineResponse20016.


        :param last_returned_payment_amount: The last_returned_payment_amount of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._last_returned_payment_amount = last_returned_payment_amount

    @property
    def next_lease_id(self):
        """Gets the next_lease_id of this InlineResponse20016.  # noqa: E501


        :return: The next_lease_id of this InlineResponse20016.  # noqa: E501
        :rtype: MongoId
        """
        return self._next_lease_id

    @next_lease_id.setter
    def next_lease_id(self, next_lease_id):
        """Sets the next_lease_id of this InlineResponse20016.


        :param next_lease_id: The next_lease_id of this InlineResponse20016.  # noqa: E501
        :type: MongoId
        """

        self._next_lease_id = next_lease_id

    @property
    def next_lease_name(self):
        """Gets the next_lease_name of this InlineResponse20016.  # noqa: E501


        :return: The next_lease_name of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._next_lease_name

    @next_lease_name.setter
    def next_lease_name(self, next_lease_name):
        """Sets the next_lease_name of this InlineResponse20016.


        :param next_lease_name: The next_lease_name of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._next_lease_name = next_lease_name

    @property
    def next_lease_start(self):
        """Gets the next_lease_start of this InlineResponse20016.  # noqa: E501

        Format: YYYY-MM-DD  # noqa: E501

        :return: The next_lease_start of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._next_lease_start

    @next_lease_start.setter
    def next_lease_start(self, next_lease_start):
        """Sets the next_lease_start of this InlineResponse20016.

        Format: YYYY-MM-DD  # noqa: E501

        :param next_lease_start: The next_lease_start of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._next_lease_start = next_lease_start

    @property
    def rollover_to_at_will(self):
        """Gets the rollover_to_at_will of this InlineResponse20016.  # noqa: E501


        :return: The rollover_to_at_will of this InlineResponse20016.  # noqa: E501
        :rtype: object
        """
        return self._rollover_to_at_will

    @rollover_to_at_will.setter
    def rollover_to_at_will(self, rollover_to_at_will):
        """Sets the rollover_to_at_will of this InlineResponse20016.


        :param rollover_to_at_will: The rollover_to_at_will of this InlineResponse20016.  # noqa: E501
        :type: object
        """

        self._rollover_to_at_will = rollover_to_at_will

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20016, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20016):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
