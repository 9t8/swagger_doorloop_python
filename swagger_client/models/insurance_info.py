# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InsuranceInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider': 'object',
        'policy_number': 'object',
        'coverage': 'object',
        'effective_date': 'object',
        'expiration_date': 'object'
    }

    attribute_map = {
        'provider': 'provider',
        'policy_number': 'policyNumber',
        'coverage': 'coverage',
        'effective_date': 'effectiveDate',
        'expiration_date': 'expirationDate'
    }

    def __init__(self, provider=None, policy_number=None, coverage=None, effective_date=None, expiration_date=None):  # noqa: E501
        """InsuranceInfo - a model defined in Swagger"""  # noqa: E501
        self._provider = None
        self._policy_number = None
        self._coverage = None
        self._effective_date = None
        self._expiration_date = None
        self.discriminator = None
        self.provider = provider
        self.policy_number = policy_number
        self.coverage = coverage
        self.effective_date = effective_date
        self.expiration_date = expiration_date

    @property
    def provider(self):
        """Gets the provider of this InsuranceInfo.  # noqa: E501


        :return: The provider of this InsuranceInfo.  # noqa: E501
        :rtype: object
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this InsuranceInfo.


        :param provider: The provider of this InsuranceInfo.  # noqa: E501
        :type: object
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def policy_number(self):
        """Gets the policy_number of this InsuranceInfo.  # noqa: E501


        :return: The policy_number of this InsuranceInfo.  # noqa: E501
        :rtype: object
        """
        return self._policy_number

    @policy_number.setter
    def policy_number(self, policy_number):
        """Sets the policy_number of this InsuranceInfo.


        :param policy_number: The policy_number of this InsuranceInfo.  # noqa: E501
        :type: object
        """
        if policy_number is None:
            raise ValueError("Invalid value for `policy_number`, must not be `None`")  # noqa: E501

        self._policy_number = policy_number

    @property
    def coverage(self):
        """Gets the coverage of this InsuranceInfo.  # noqa: E501


        :return: The coverage of this InsuranceInfo.  # noqa: E501
        :rtype: object
        """
        return self._coverage

    @coverage.setter
    def coverage(self, coverage):
        """Sets the coverage of this InsuranceInfo.


        :param coverage: The coverage of this InsuranceInfo.  # noqa: E501
        :type: object
        """
        if coverage is None:
            raise ValueError("Invalid value for `coverage`, must not be `None`")  # noqa: E501

        self._coverage = coverage

    @property
    def effective_date(self):
        """Gets the effective_date of this InsuranceInfo.  # noqa: E501

        Format: YYYY-MM-DD. Must be before expirationDate.  # noqa: E501

        :return: The effective_date of this InsuranceInfo.  # noqa: E501
        :rtype: object
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this InsuranceInfo.

        Format: YYYY-MM-DD. Must be before expirationDate.  # noqa: E501

        :param effective_date: The effective_date of this InsuranceInfo.  # noqa: E501
        :type: object
        """
        if effective_date is None:
            raise ValueError("Invalid value for `effective_date`, must not be `None`")  # noqa: E501

        self._effective_date = effective_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this InsuranceInfo.  # noqa: E501

        Format: YYYY-MM-DD. Must be after effectiveDate.  # noqa: E501

        :return: The expiration_date of this InsuranceInfo.  # noqa: E501
        :rtype: object
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this InsuranceInfo.

        Format: YYYY-MM-DD. Must be after effectiveDate.  # noqa: E501

        :param expiration_date: The expiration_date of this InsuranceInfo.  # noqa: E501
        :type: object
        """
        if expiration_date is None:
            raise ValueError("Invalid value for `expiration_date`, must not be `None`")  # noqa: E501

        self._expiration_date = expiration_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InsuranceInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InsuranceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
