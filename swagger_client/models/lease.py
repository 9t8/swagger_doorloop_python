# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Lease(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'MongoId',
        '_property': 'MongoId',
        'name': 'object',
        'notes': 'object',
        'reference': 'object',
        'start': 'object',
        'end': 'object',
        'term': 'object',
        'rollover_to_at_will': 'object',
        'units': 'object',
        'status': 'object',
        'evicton_pending': 'object',
        'proof_of_insurance_required': 'object',
        'total_balancedue': 'object',
        'total_deposits_held': 'object',
        'total_recurring_rent': 'object',
        'total_recurring_payments': 'object',
        'total_recurring_credits': 'object',
        'total_recurring_charges': 'object'
    }

    attribute_map = {
        'id': 'id',
        '_property': 'property',
        'name': 'name',
        'notes': 'notes',
        'reference': 'reference',
        'start': 'start',
        'end': 'end',
        'term': 'term',
        'rollover_to_at_will': 'rolloverToAtWill',
        'units': 'units',
        'status': 'status',
        'evicton_pending': 'evictonPending',
        'proof_of_insurance_required': 'proofOfInsuranceRequired',
        'total_balancedue': 'totalBalancedue',
        'total_deposits_held': 'totalDepositsHeld',
        'total_recurring_rent': 'totalRecurringRent',
        'total_recurring_payments': 'totalRecurringPayments',
        'total_recurring_credits': 'totalRecurringCredits',
        'total_recurring_charges': 'TotalRecurringCharges'
    }

    def __init__(self, id=None, _property=None, name=None, notes=None, reference=None, start=None, end=None, term=None, rollover_to_at_will=None, units=None, status=None, evicton_pending=None, proof_of_insurance_required=None, total_balancedue=None, total_deposits_held=None, total_recurring_rent=None, total_recurring_payments=None, total_recurring_credits=None, total_recurring_charges=None):  # noqa: E501
        """Lease - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self.__property = None
        self._name = None
        self._notes = None
        self._reference = None
        self._start = None
        self._end = None
        self._term = None
        self._rollover_to_at_will = None
        self._units = None
        self._status = None
        self._evicton_pending = None
        self._proof_of_insurance_required = None
        self._total_balancedue = None
        self._total_deposits_held = None
        self._total_recurring_rent = None
        self._total_recurring_payments = None
        self._total_recurring_credits = None
        self._total_recurring_charges = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self._property = _property
        self.name = name
        if notes is not None:
            self.notes = notes
        if reference is not None:
            self.reference = reference
        self.start = start
        if end is not None:
            self.end = end
        self.term = term
        if rollover_to_at_will is not None:
            self.rollover_to_at_will = rollover_to_at_will
        self.units = units
        self.status = status
        if evicton_pending is not None:
            self.evicton_pending = evicton_pending
        if proof_of_insurance_required is not None:
            self.proof_of_insurance_required = proof_of_insurance_required
        if total_balancedue is not None:
            self.total_balancedue = total_balancedue
        if total_deposits_held is not None:
            self.total_deposits_held = total_deposits_held
        if total_recurring_rent is not None:
            self.total_recurring_rent = total_recurring_rent
        if total_recurring_payments is not None:
            self.total_recurring_payments = total_recurring_payments
        if total_recurring_credits is not None:
            self.total_recurring_credits = total_recurring_credits
        if total_recurring_charges is not None:
            self.total_recurring_charges = total_recurring_charges

    @property
    def id(self):
        """Gets the id of this Lease.  # noqa: E501


        :return: The id of this Lease.  # noqa: E501
        :rtype: MongoId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Lease.


        :param id: The id of this Lease.  # noqa: E501
        :type: MongoId
        """

        self._id = id

    @property
    def _property(self):
        """Gets the _property of this Lease.  # noqa: E501


        :return: The _property of this Lease.  # noqa: E501
        :rtype: MongoId
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this Lease.


        :param _property: The _property of this Lease.  # noqa: E501
        :type: MongoId
        """
        if _property is None:
            raise ValueError("Invalid value for `_property`, must not be `None`")  # noqa: E501

        self.__property = _property

    @property
    def name(self):
        """Gets the name of this Lease.  # noqa: E501


        :return: The name of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Lease.


        :param name: The name of this Lease.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Lease.  # noqa: E501


        :return: The notes of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Lease.


        :param notes: The notes of this Lease.  # noqa: E501
        :type: object
        """

        self._notes = notes

    @property
    def reference(self):
        """Gets the reference of this Lease.  # noqa: E501

        Read Only  # noqa: E501

        :return: The reference of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Lease.

        Read Only  # noqa: E501

        :param reference: The reference of this Lease.  # noqa: E501
        :type: object
        """

        self._reference = reference

    @property
    def start(self):
        """Gets the start of this Lease.  # noqa: E501

        Format: YYYY-MM-DD  # noqa: E501

        :return: The start of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Lease.

        Format: YYYY-MM-DD  # noqa: E501

        :param start: The start of this Lease.  # noqa: E501
        :type: object
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self):
        """Gets the end of this Lease.  # noqa: E501

        Required if term == AtWill. Format: YYYY-MM-DD  # noqa: E501

        :return: The end of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Lease.

        Required if term == AtWill. Format: YYYY-MM-DD  # noqa: E501

        :param end: The end of this Lease.  # noqa: E501
        :type: object
        """

        self._end = end

    @property
    def term(self):
        """Gets the term of this Lease.  # noqa: E501


        :return: The term of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this Lease.


        :param term: The term of this Lease.  # noqa: E501
        :type: object
        """
        if term is None:
            raise ValueError("Invalid value for `term`, must not be `None`")  # noqa: E501

        self._term = term

    @property
    def rollover_to_at_will(self):
        """Gets the rollover_to_at_will of this Lease.  # noqa: E501

        If set to true, the lease will automatically rollover to \"At Will\" (Month to Month) at the end of the fixed term.  # noqa: E501

        :return: The rollover_to_at_will of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._rollover_to_at_will

    @rollover_to_at_will.setter
    def rollover_to_at_will(self, rollover_to_at_will):
        """Sets the rollover_to_at_will of this Lease.

        If set to true, the lease will automatically rollover to \"At Will\" (Month to Month) at the end of the fixed term.  # noqa: E501

        :param rollover_to_at_will: The rollover_to_at_will of this Lease.  # noqa: E501
        :type: object
        """

        self._rollover_to_at_will = rollover_to_at_will

    @property
    def units(self):
        """Gets the units of this Lease.  # noqa: E501

        An array of Unit Ids for this lease  # noqa: E501

        :return: The units of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Lease.

        An array of Unit Ids for this lease  # noqa: E501

        :param units: The units of this Lease.  # noqa: E501
        :type: object
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")  # noqa: E501

        self._units = units

    @property
    def status(self):
        """Gets the status of this Lease.  # noqa: E501

        Read Only  # noqa: E501

        :return: The status of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Lease.

        Read Only  # noqa: E501

        :param status: The status of this Lease.  # noqa: E501
        :type: object
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def evicton_pending(self):
        """Gets the evicton_pending of this Lease.  # noqa: E501


        :return: The evicton_pending of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._evicton_pending

    @evicton_pending.setter
    def evicton_pending(self, evicton_pending):
        """Sets the evicton_pending of this Lease.


        :param evicton_pending: The evicton_pending of this Lease.  # noqa: E501
        :type: object
        """

        self._evicton_pending = evicton_pending

    @property
    def proof_of_insurance_required(self):
        """Gets the proof_of_insurance_required of this Lease.  # noqa: E501


        :return: The proof_of_insurance_required of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._proof_of_insurance_required

    @proof_of_insurance_required.setter
    def proof_of_insurance_required(self, proof_of_insurance_required):
        """Sets the proof_of_insurance_required of this Lease.


        :param proof_of_insurance_required: The proof_of_insurance_required of this Lease.  # noqa: E501
        :type: object
        """

        self._proof_of_insurance_required = proof_of_insurance_required

    @property
    def total_balancedue(self):
        """Gets the total_balancedue of this Lease.  # noqa: E501

        Read Only  # noqa: E501

        :return: The total_balancedue of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._total_balancedue

    @total_balancedue.setter
    def total_balancedue(self, total_balancedue):
        """Sets the total_balancedue of this Lease.

        Read Only  # noqa: E501

        :param total_balancedue: The total_balancedue of this Lease.  # noqa: E501
        :type: object
        """

        self._total_balancedue = total_balancedue

    @property
    def total_deposits_held(self):
        """Gets the total_deposits_held of this Lease.  # noqa: E501

        Read Only  # noqa: E501

        :return: The total_deposits_held of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._total_deposits_held

    @total_deposits_held.setter
    def total_deposits_held(self, total_deposits_held):
        """Sets the total_deposits_held of this Lease.

        Read Only  # noqa: E501

        :param total_deposits_held: The total_deposits_held of this Lease.  # noqa: E501
        :type: object
        """

        self._total_deposits_held = total_deposits_held

    @property
    def total_recurring_rent(self):
        """Gets the total_recurring_rent of this Lease.  # noqa: E501

        Read Only  # noqa: E501

        :return: The total_recurring_rent of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._total_recurring_rent

    @total_recurring_rent.setter
    def total_recurring_rent(self, total_recurring_rent):
        """Sets the total_recurring_rent of this Lease.

        Read Only  # noqa: E501

        :param total_recurring_rent: The total_recurring_rent of this Lease.  # noqa: E501
        :type: object
        """

        self._total_recurring_rent = total_recurring_rent

    @property
    def total_recurring_payments(self):
        """Gets the total_recurring_payments of this Lease.  # noqa: E501

        Read Only  # noqa: E501

        :return: The total_recurring_payments of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._total_recurring_payments

    @total_recurring_payments.setter
    def total_recurring_payments(self, total_recurring_payments):
        """Sets the total_recurring_payments of this Lease.

        Read Only  # noqa: E501

        :param total_recurring_payments: The total_recurring_payments of this Lease.  # noqa: E501
        :type: object
        """

        self._total_recurring_payments = total_recurring_payments

    @property
    def total_recurring_credits(self):
        """Gets the total_recurring_credits of this Lease.  # noqa: E501

        Read Only  # noqa: E501

        :return: The total_recurring_credits of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._total_recurring_credits

    @total_recurring_credits.setter
    def total_recurring_credits(self, total_recurring_credits):
        """Sets the total_recurring_credits of this Lease.

        Read Only  # noqa: E501

        :param total_recurring_credits: The total_recurring_credits of this Lease.  # noqa: E501
        :type: object
        """

        self._total_recurring_credits = total_recurring_credits

    @property
    def total_recurring_charges(self):
        """Gets the total_recurring_charges of this Lease.  # noqa: E501

        Read Only  # noqa: E501

        :return: The total_recurring_charges of this Lease.  # noqa: E501
        :rtype: object
        """
        return self._total_recurring_charges

    @total_recurring_charges.setter
    def total_recurring_charges(self, total_recurring_charges):
        """Sets the total_recurring_charges of this Lease.

        Read Only  # noqa: E501

        :param total_recurring_charges: The total_recurring_charges of this Lease.  # noqa: E501
        :type: object
        """

        self._total_recurring_charges = total_recurring_charges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Lease, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Lease):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
