# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LeasePayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'MongoId',
        'reference': 'object',
        'amount_received': 'object',
        'payment_method': 'PaymentMethods',
        'lease': 'MongoId',
        'received_from_tenant': 'MongoId',
        'deposit_to_account': 'MongoId',
        'auto_apply_payment_on_charges': 'object',
        'auto_deposit': 'object',
        'deposit_status': 'object',
        'reversed_payment': 'object'
    }

    attribute_map = {
        'id': 'id',
        'reference': 'reference',
        'amount_received': 'amountReceived',
        'payment_method': 'paymentMethod',
        'lease': 'lease',
        'received_from_tenant': 'receivedFromTenant',
        'deposit_to_account': 'depositToAccount',
        'auto_apply_payment_on_charges': 'autoApplyPaymentOnCharges',
        'auto_deposit': 'autoDeposit',
        'deposit_status': 'depositStatus',
        'reversed_payment': 'reversedPayment'
    }

    def __init__(self, id=None, reference=None, amount_received=None, payment_method=None, lease=None, received_from_tenant=None, deposit_to_account=None, auto_apply_payment_on_charges=None, auto_deposit=None, deposit_status=None, reversed_payment=None):  # noqa: E501
        """LeasePayment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._reference = None
        self._amount_received = None
        self._payment_method = None
        self._lease = None
        self._received_from_tenant = None
        self._deposit_to_account = None
        self._auto_apply_payment_on_charges = None
        self._auto_deposit = None
        self._deposit_status = None
        self._reversed_payment = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if reference is not None:
            self.reference = reference
        self.amount_received = amount_received
        self.payment_method = payment_method
        self.lease = lease
        if received_from_tenant is not None:
            self.received_from_tenant = received_from_tenant
        self.deposit_to_account = deposit_to_account
        self.auto_apply_payment_on_charges = auto_apply_payment_on_charges
        if auto_deposit is not None:
            self.auto_deposit = auto_deposit
        if deposit_status is not None:
            self.deposit_status = deposit_status
        if reversed_payment is not None:
            self.reversed_payment = reversed_payment

    @property
    def id(self):
        """Gets the id of this LeasePayment.  # noqa: E501


        :return: The id of this LeasePayment.  # noqa: E501
        :rtype: MongoId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LeasePayment.


        :param id: The id of this LeasePayment.  # noqa: E501
        :type: MongoId
        """

        self._id = id

    @property
    def reference(self):
        """Gets the reference of this LeasePayment.  # noqa: E501


        :return: The reference of this LeasePayment.  # noqa: E501
        :rtype: object
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this LeasePayment.


        :param reference: The reference of this LeasePayment.  # noqa: E501
        :type: object
        """

        self._reference = reference

    @property
    def amount_received(self):
        """Gets the amount_received of this LeasePayment.  # noqa: E501


        :return: The amount_received of this LeasePayment.  # noqa: E501
        :rtype: object
        """
        return self._amount_received

    @amount_received.setter
    def amount_received(self, amount_received):
        """Sets the amount_received of this LeasePayment.


        :param amount_received: The amount_received of this LeasePayment.  # noqa: E501
        :type: object
        """
        if amount_received is None:
            raise ValueError("Invalid value for `amount_received`, must not be `None`")  # noqa: E501

        self._amount_received = amount_received

    @property
    def payment_method(self):
        """Gets the payment_method of this LeasePayment.  # noqa: E501


        :return: The payment_method of this LeasePayment.  # noqa: E501
        :rtype: PaymentMethods
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this LeasePayment.


        :param payment_method: The payment_method of this LeasePayment.  # noqa: E501
        :type: PaymentMethods
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")  # noqa: E501

        self._payment_method = payment_method

    @property
    def lease(self):
        """Gets the lease of this LeasePayment.  # noqa: E501


        :return: The lease of this LeasePayment.  # noqa: E501
        :rtype: MongoId
        """
        return self._lease

    @lease.setter
    def lease(self, lease):
        """Sets the lease of this LeasePayment.


        :param lease: The lease of this LeasePayment.  # noqa: E501
        :type: MongoId
        """
        if lease is None:
            raise ValueError("Invalid value for `lease`, must not be `None`")  # noqa: E501

        self._lease = lease

    @property
    def received_from_tenant(self):
        """Gets the received_from_tenant of this LeasePayment.  # noqa: E501


        :return: The received_from_tenant of this LeasePayment.  # noqa: E501
        :rtype: MongoId
        """
        return self._received_from_tenant

    @received_from_tenant.setter
    def received_from_tenant(self, received_from_tenant):
        """Sets the received_from_tenant of this LeasePayment.


        :param received_from_tenant: The received_from_tenant of this LeasePayment.  # noqa: E501
        :type: MongoId
        """

        self._received_from_tenant = received_from_tenant

    @property
    def deposit_to_account(self):
        """Gets the deposit_to_account of this LeasePayment.  # noqa: E501


        :return: The deposit_to_account of this LeasePayment.  # noqa: E501
        :rtype: MongoId
        """
        return self._deposit_to_account

    @deposit_to_account.setter
    def deposit_to_account(self, deposit_to_account):
        """Sets the deposit_to_account of this LeasePayment.


        :param deposit_to_account: The deposit_to_account of this LeasePayment.  # noqa: E501
        :type: MongoId
        """
        if deposit_to_account is None:
            raise ValueError("Invalid value for `deposit_to_account`, must not be `None`")  # noqa: E501

        self._deposit_to_account = deposit_to_account

    @property
    def auto_apply_payment_on_charges(self):
        """Gets the auto_apply_payment_on_charges of this LeasePayment.  # noqa: E501


        :return: The auto_apply_payment_on_charges of this LeasePayment.  # noqa: E501
        :rtype: object
        """
        return self._auto_apply_payment_on_charges

    @auto_apply_payment_on_charges.setter
    def auto_apply_payment_on_charges(self, auto_apply_payment_on_charges):
        """Sets the auto_apply_payment_on_charges of this LeasePayment.


        :param auto_apply_payment_on_charges: The auto_apply_payment_on_charges of this LeasePayment.  # noqa: E501
        :type: object
        """
        if auto_apply_payment_on_charges is None:
            raise ValueError("Invalid value for `auto_apply_payment_on_charges`, must not be `None`")  # noqa: E501

        self._auto_apply_payment_on_charges = auto_apply_payment_on_charges

    @property
    def auto_deposit(self):
        """Gets the auto_deposit of this LeasePayment.  # noqa: E501


        :return: The auto_deposit of this LeasePayment.  # noqa: E501
        :rtype: object
        """
        return self._auto_deposit

    @auto_deposit.setter
    def auto_deposit(self, auto_deposit):
        """Sets the auto_deposit of this LeasePayment.


        :param auto_deposit: The auto_deposit of this LeasePayment.  # noqa: E501
        :type: object
        """

        self._auto_deposit = auto_deposit

    @property
    def deposit_status(self):
        """Gets the deposit_status of this LeasePayment.  # noqa: E501

        Read Only  # noqa: E501

        :return: The deposit_status of this LeasePayment.  # noqa: E501
        :rtype: object
        """
        return self._deposit_status

    @deposit_status.setter
    def deposit_status(self, deposit_status):
        """Sets the deposit_status of this LeasePayment.

        Read Only  # noqa: E501

        :param deposit_status: The deposit_status of this LeasePayment.  # noqa: E501
        :type: object
        """

        self._deposit_status = deposit_status

    @property
    def reversed_payment(self):
        """Gets the reversed_payment of this LeasePayment.  # noqa: E501

        If this payment was returned, will reference the returned payment  # noqa: E501

        :return: The reversed_payment of this LeasePayment.  # noqa: E501
        :rtype: object
        """
        return self._reversed_payment

    @reversed_payment.setter
    def reversed_payment(self, reversed_payment):
        """Sets the reversed_payment of this LeasePayment.

        If this payment was returned, will reference the returned payment  # noqa: E501

        :param reversed_payment: The reversed_payment of this LeasePayment.  # noqa: E501
        :type: object
        """

        self._reversed_payment = reversed_payment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeasePayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeasePayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
