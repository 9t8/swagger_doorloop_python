# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LeaseTenant(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'MongoId',
        'name': 'object',
        'lease': 'MongoId',
        '_property': 'MongoId',
        'units': 'object',
        'status': 'object',
        'move_in_at': 'object',
        'move_out_at': 'object',
        'move_out_notice_at': 'object',
        'portal_enabled': 'object',
        'tenant': 'Tenant'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'lease': 'lease',
        '_property': 'property',
        'units': 'units',
        'status': 'status',
        'move_in_at': 'moveInAt',
        'move_out_at': 'moveOutAt',
        'move_out_notice_at': 'moveOutNoticeAt',
        'portal_enabled': 'portalEnabled',
        'tenant': 'tenant'
    }

    def __init__(self, id=None, name=None, lease=None, _property=None, units=None, status=None, move_in_at=None, move_out_at=None, move_out_notice_at=None, portal_enabled=None, tenant=None):  # noqa: E501
        """LeaseTenant - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._lease = None
        self.__property = None
        self._units = None
        self._status = None
        self._move_in_at = None
        self._move_out_at = None
        self._move_out_notice_at = None
        self._portal_enabled = None
        self._tenant = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.lease = lease
        self._property = _property
        self.units = units
        self.status = status
        if move_in_at is not None:
            self.move_in_at = move_in_at
        if move_out_at is not None:
            self.move_out_at = move_out_at
        if move_out_notice_at is not None:
            self.move_out_notice_at = move_out_notice_at
        if portal_enabled is not None:
            self.portal_enabled = portal_enabled
        if tenant is not None:
            self.tenant = tenant

    @property
    def id(self):
        """Gets the id of this LeaseTenant.  # noqa: E501


        :return: The id of this LeaseTenant.  # noqa: E501
        :rtype: MongoId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LeaseTenant.


        :param id: The id of this LeaseTenant.  # noqa: E501
        :type: MongoId
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this LeaseTenant.  # noqa: E501

        The display name for this tenant  # noqa: E501

        :return: The name of this LeaseTenant.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LeaseTenant.

        The display name for this tenant  # noqa: E501

        :param name: The name of this LeaseTenant.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def lease(self):
        """Gets the lease of this LeaseTenant.  # noqa: E501


        :return: The lease of this LeaseTenant.  # noqa: E501
        :rtype: MongoId
        """
        return self._lease

    @lease.setter
    def lease(self, lease):
        """Sets the lease of this LeaseTenant.


        :param lease: The lease of this LeaseTenant.  # noqa: E501
        :type: MongoId
        """
        if lease is None:
            raise ValueError("Invalid value for `lease`, must not be `None`")  # noqa: E501

        self._lease = lease

    @property
    def _property(self):
        """Gets the _property of this LeaseTenant.  # noqa: E501


        :return: The _property of this LeaseTenant.  # noqa: E501
        :rtype: MongoId
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this LeaseTenant.


        :param _property: The _property of this LeaseTenant.  # noqa: E501
        :type: MongoId
        """
        if _property is None:
            raise ValueError("Invalid value for `_property`, must not be `None`")  # noqa: E501

        self.__property = _property

    @property
    def units(self):
        """Gets the units of this LeaseTenant.  # noqa: E501

        An array of unit Ids for this tenant  # noqa: E501

        :return: The units of this LeaseTenant.  # noqa: E501
        :rtype: object
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this LeaseTenant.

        An array of unit Ids for this tenant  # noqa: E501

        :param units: The units of this LeaseTenant.  # noqa: E501
        :type: object
        """
        if units is None:
            raise ValueError("Invalid value for `units`, must not be `None`")  # noqa: E501

        self._units = units

    @property
    def status(self):
        """Gets the status of this LeaseTenant.  # noqa: E501

        The current status of this tenant  # noqa: E501

        :return: The status of this LeaseTenant.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LeaseTenant.

        The current status of this tenant  # noqa: E501

        :param status: The status of this LeaseTenant.  # noqa: E501
        :type: object
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def move_in_at(self):
        """Gets the move_in_at of this LeaseTenant.  # noqa: E501

        Format: YYYY-MM-DD  # noqa: E501

        :return: The move_in_at of this LeaseTenant.  # noqa: E501
        :rtype: object
        """
        return self._move_in_at

    @move_in_at.setter
    def move_in_at(self, move_in_at):
        """Sets the move_in_at of this LeaseTenant.

        Format: YYYY-MM-DD  # noqa: E501

        :param move_in_at: The move_in_at of this LeaseTenant.  # noqa: E501
        :type: object
        """

        self._move_in_at = move_in_at

    @property
    def move_out_at(self):
        """Gets the move_out_at of this LeaseTenant.  # noqa: E501

        Format: YYYY-MM-DD  # noqa: E501

        :return: The move_out_at of this LeaseTenant.  # noqa: E501
        :rtype: object
        """
        return self._move_out_at

    @move_out_at.setter
    def move_out_at(self, move_out_at):
        """Sets the move_out_at of this LeaseTenant.

        Format: YYYY-MM-DD  # noqa: E501

        :param move_out_at: The move_out_at of this LeaseTenant.  # noqa: E501
        :type: object
        """

        self._move_out_at = move_out_at

    @property
    def move_out_notice_at(self):
        """Gets the move_out_notice_at of this LeaseTenant.  # noqa: E501

        Format: YYYY-MM-DD  # noqa: E501

        :return: The move_out_notice_at of this LeaseTenant.  # noqa: E501
        :rtype: object
        """
        return self._move_out_notice_at

    @move_out_notice_at.setter
    def move_out_notice_at(self, move_out_notice_at):
        """Sets the move_out_notice_at of this LeaseTenant.

        Format: YYYY-MM-DD  # noqa: E501

        :param move_out_notice_at: The move_out_notice_at of this LeaseTenant.  # noqa: E501
        :type: object
        """

        self._move_out_notice_at = move_out_notice_at

    @property
    def portal_enabled(self):
        """Gets the portal_enabled of this LeaseTenant.  # noqa: E501


        :return: The portal_enabled of this LeaseTenant.  # noqa: E501
        :rtype: object
        """
        return self._portal_enabled

    @portal_enabled.setter
    def portal_enabled(self, portal_enabled):
        """Sets the portal_enabled of this LeaseTenant.


        :param portal_enabled: The portal_enabled of this LeaseTenant.  # noqa: E501
        :type: object
        """

        self._portal_enabled = portal_enabled

    @property
    def tenant(self):
        """Gets the tenant of this LeaseTenant.  # noqa: E501


        :return: The tenant of this LeaseTenant.  # noqa: E501
        :rtype: Tenant
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this LeaseTenant.


        :param tenant: The tenant of this LeaseTenant.  # noqa: E501
        :type: Tenant
        """

        self._tenant = tenant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeaseTenant, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeaseTenant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
