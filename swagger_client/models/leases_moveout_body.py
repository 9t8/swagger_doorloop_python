# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LeasesMoveoutBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lease_id': 'MongoId',
        'moved_out_at': 'object',
        'tenants': 'object',
        'portal_enabled': 'object',
        'move_out_notice_at': 'object',
        'move_out_reason': 'object'
    }

    attribute_map = {
        'lease_id': 'leaseId',
        'moved_out_at': 'movedOutAt',
        'tenants': 'tenants',
        'portal_enabled': 'portalEnabled',
        'move_out_notice_at': 'moveOutNoticeAt',
        'move_out_reason': 'moveOutReason'
    }

    def __init__(self, lease_id=None, moved_out_at=None, tenants=None, portal_enabled=None, move_out_notice_at=None, move_out_reason=None):  # noqa: E501
        """LeasesMoveoutBody - a model defined in Swagger"""  # noqa: E501
        self._lease_id = None
        self._moved_out_at = None
        self._tenants = None
        self._portal_enabled = None
        self._move_out_notice_at = None
        self._move_out_reason = None
        self.discriminator = None
        self.lease_id = lease_id
        self.moved_out_at = moved_out_at
        self.tenants = tenants
        self.portal_enabled = portal_enabled
        if move_out_notice_at is not None:
            self.move_out_notice_at = move_out_notice_at
        if move_out_reason is not None:
            self.move_out_reason = move_out_reason

    @property
    def lease_id(self):
        """Gets the lease_id of this LeasesMoveoutBody.  # noqa: E501


        :return: The lease_id of this LeasesMoveoutBody.  # noqa: E501
        :rtype: MongoId
        """
        return self._lease_id

    @lease_id.setter
    def lease_id(self, lease_id):
        """Sets the lease_id of this LeasesMoveoutBody.


        :param lease_id: The lease_id of this LeasesMoveoutBody.  # noqa: E501
        :type: MongoId
        """
        if lease_id is None:
            raise ValueError("Invalid value for `lease_id`, must not be `None`")  # noqa: E501

        self._lease_id = lease_id

    @property
    def moved_out_at(self):
        """Gets the moved_out_at of this LeasesMoveoutBody.  # noqa: E501

        Format: YYYY-MM-DD  # noqa: E501

        :return: The moved_out_at of this LeasesMoveoutBody.  # noqa: E501
        :rtype: object
        """
        return self._moved_out_at

    @moved_out_at.setter
    def moved_out_at(self, moved_out_at):
        """Sets the moved_out_at of this LeasesMoveoutBody.

        Format: YYYY-MM-DD  # noqa: E501

        :param moved_out_at: The moved_out_at of this LeasesMoveoutBody.  # noqa: E501
        :type: object
        """
        if moved_out_at is None:
            raise ValueError("Invalid value for `moved_out_at`, must not be `None`")  # noqa: E501

        self._moved_out_at = moved_out_at

    @property
    def tenants(self):
        """Gets the tenants of this LeasesMoveoutBody.  # noqa: E501

        An array of Tenant Ids to move in  # noqa: E501

        :return: The tenants of this LeasesMoveoutBody.  # noqa: E501
        :rtype: object
        """
        return self._tenants

    @tenants.setter
    def tenants(self, tenants):
        """Sets the tenants of this LeasesMoveoutBody.

        An array of Tenant Ids to move in  # noqa: E501

        :param tenants: The tenants of this LeasesMoveoutBody.  # noqa: E501
        :type: object
        """
        if tenants is None:
            raise ValueError("Invalid value for `tenants`, must not be `None`")  # noqa: E501

        self._tenants = tenants

    @property
    def portal_enabled(self):
        """Gets the portal_enabled of this LeasesMoveoutBody.  # noqa: E501


        :return: The portal_enabled of this LeasesMoveoutBody.  # noqa: E501
        :rtype: object
        """
        return self._portal_enabled

    @portal_enabled.setter
    def portal_enabled(self, portal_enabled):
        """Sets the portal_enabled of this LeasesMoveoutBody.


        :param portal_enabled: The portal_enabled of this LeasesMoveoutBody.  # noqa: E501
        :type: object
        """
        if portal_enabled is None:
            raise ValueError("Invalid value for `portal_enabled`, must not be `None`")  # noqa: E501

        self._portal_enabled = portal_enabled

    @property
    def move_out_notice_at(self):
        """Gets the move_out_notice_at of this LeasesMoveoutBody.  # noqa: E501

        Format: YYYY-MM-DD  # noqa: E501

        :return: The move_out_notice_at of this LeasesMoveoutBody.  # noqa: E501
        :rtype: object
        """
        return self._move_out_notice_at

    @move_out_notice_at.setter
    def move_out_notice_at(self, move_out_notice_at):
        """Sets the move_out_notice_at of this LeasesMoveoutBody.

        Format: YYYY-MM-DD  # noqa: E501

        :param move_out_notice_at: The move_out_notice_at of this LeasesMoveoutBody.  # noqa: E501
        :type: object
        """

        self._move_out_notice_at = move_out_notice_at

    @property
    def move_out_reason(self):
        """Gets the move_out_reason of this LeasesMoveoutBody.  # noqa: E501


        :return: The move_out_reason of this LeasesMoveoutBody.  # noqa: E501
        :rtype: object
        """
        return self._move_out_reason

    @move_out_reason.setter
    def move_out_reason(self, move_out_reason):
        """Sets the move_out_reason of this LeasesMoveoutBody.


        :param move_out_reason: The move_out_reason of this LeasesMoveoutBody.  # noqa: E501
        :type: object
        """

        self._move_out_reason = move_out_reason

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LeasesMoveoutBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LeasesMoveoutBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
