# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelProperty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'MongoId',
        'name': 'object',
        'type': 'object',
        'address': 'Address',
        'description': 'object',
        '_class': 'object',
        'owners': 'object',
        'pictures': 'object',
        'amenities': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'address': 'address',
        'description': 'description',
        '_class': 'class',
        'owners': 'owners',
        'pictures': 'pictures',
        'amenities': 'amenities'
    }

    def __init__(self, id=None, name=None, type=None, address=None, description=None, _class=None, owners=None, pictures=None, amenities=None):  # noqa: E501
        """ModelProperty - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._type = None
        self._address = None
        self._description = None
        self.__class = None
        self._owners = None
        self._pictures = None
        self._amenities = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.type = type
        self.address = address
        if description is not None:
            self.description = description
        if _class is not None:
            self._class = _class
        if owners is not None:
            self.owners = owners
        if pictures is not None:
            self.pictures = pictures
        if amenities is not None:
            self.amenities = amenities

    @property
    def id(self):
        """Gets the id of this ModelProperty.  # noqa: E501


        :return: The id of this ModelProperty.  # noqa: E501
        :rtype: MongoId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelProperty.


        :param id: The id of this ModelProperty.  # noqa: E501
        :type: MongoId
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ModelProperty.  # noqa: E501


        :return: The name of this ModelProperty.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ModelProperty.


        :param name: The name of this ModelProperty.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this ModelProperty.  # noqa: E501


        :return: The type of this ModelProperty.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelProperty.


        :param type: The type of this ModelProperty.  # noqa: E501
        :type: object
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def address(self):
        """Gets the address of this ModelProperty.  # noqa: E501


        :return: The address of this ModelProperty.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ModelProperty.


        :param address: The address of this ModelProperty.  # noqa: E501
        :type: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def description(self):
        """Gets the description of this ModelProperty.  # noqa: E501


        :return: The description of this ModelProperty.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ModelProperty.


        :param description: The description of this ModelProperty.  # noqa: E501
        :type: object
        """

        self._description = description

    @property
    def _class(self):
        """Gets the _class of this ModelProperty.  # noqa: E501

        Read Only  # noqa: E501

        :return: The _class of this ModelProperty.  # noqa: E501
        :rtype: object
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this ModelProperty.

        Read Only  # noqa: E501

        :param _class: The _class of this ModelProperty.  # noqa: E501
        :type: object
        """

        self.__class = _class

    @property
    def owners(self):
        """Gets the owners of this ModelProperty.  # noqa: E501


        :return: The owners of this ModelProperty.  # noqa: E501
        :rtype: object
        """
        return self._owners

    @owners.setter
    def owners(self, owners):
        """Sets the owners of this ModelProperty.


        :param owners: The owners of this ModelProperty.  # noqa: E501
        :type: object
        """

        self._owners = owners

    @property
    def pictures(self):
        """Gets the pictures of this ModelProperty.  # noqa: E501


        :return: The pictures of this ModelProperty.  # noqa: E501
        :rtype: object
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this ModelProperty.


        :param pictures: The pictures of this ModelProperty.  # noqa: E501
        :type: object
        """

        self._pictures = pictures

    @property
    def amenities(self):
        """Gets the amenities of this ModelProperty.  # noqa: E501

        Please refer to the MITS standard documentation for a list of possible values  # noqa: E501

        :return: The amenities of this ModelProperty.  # noqa: E501
        :rtype: object
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities):
        """Sets the amenities of this ModelProperty.

        Please refer to the MITS standard documentation for a list of possible values  # noqa: E501

        :param amenities: The amenities of this ModelProperty.  # noqa: E501
        :type: object
        """

        self._amenities = amenities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelProperty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
