# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Person(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'MongoId',
        'name': 'object',
        'first_name': 'object',
        'middle_name': 'object',
        'last_name': 'object',
        'gender': 'object',
        'full_name': 'object',
        'date_of_birth': 'object',
        'timezone': 'object',
        'company': 'object',
        'company_name': 'object',
        'job_title': 'object',
        'notes': 'object',
        'phones': 'object',
        'emails': 'object',
        'primary_address': 'Address',
        'picture_url': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'first_name': 'firstName',
        'middle_name': 'middleName',
        'last_name': 'lastName',
        'gender': 'gender',
        'full_name': 'fullName',
        'date_of_birth': 'dateOfBirth',
        'timezone': 'timezone',
        'company': 'company',
        'company_name': 'companyName',
        'job_title': 'jobTitle',
        'notes': 'notes',
        'phones': 'phones',
        'emails': 'emails',
        'primary_address': 'primaryAddress',
        'picture_url': 'pictureUrl'
    }

    def __init__(self, id=None, name=None, first_name=None, middle_name=None, last_name=None, gender=None, full_name=None, date_of_birth=None, timezone=None, company=None, company_name=None, job_title=None, notes=None, phones=None, emails=None, primary_address=None, picture_url=None):  # noqa: E501
        """Person - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._gender = None
        self._full_name = None
        self._date_of_birth = None
        self._timezone = None
        self._company = None
        self._company_name = None
        self._job_title = None
        self._notes = None
        self._phones = None
        self._emails = None
        self._primary_address = None
        self._picture_url = None
        self._ = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        self.last_name = last_name
        if gender is not None:
            self.gender = gender
        if full_name is not None:
            self.full_name = full_name
        if date_of_birth is not None:
            self.date_of_birth = date_of_birth
        if timezone is not None:
            self.timezone = timezone
        if company is not None:
            self.company = company
        if company_name is not None:
            self.company_name = company_name
        if job_title is not None:
            self.job_title = job_title
        if notes is not None:
            self.notes = notes
        if phones is not None:
            self.phones = phones
        if emails is not None:
            self.emails = emails
        if primary_address is not None:
            self.primary_address = primary_address
        if picture_url is not None:
            self.picture_url = picture_url

    @property
    def id(self):
        """Gets the id of this Person.  # noqa: E501


        :return: The id of this Person.  # noqa: E501
        :rtype: MongoId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Person.


        :param id: The id of this Person.  # noqa: E501
        :type: MongoId
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Person.  # noqa: E501

        Read Only  # noqa: E501

        :return: The name of this Person.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Person.

        Read Only  # noqa: E501

        :param name: The name of this Person.  # noqa: E501
        :type: object
        """

        self._name = name

    @property
    def first_name(self):
        """Gets the first_name of this Person.  # noqa: E501


        :return: The first_name of this Person.  # noqa: E501
        :rtype: object
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Person.


        :param first_name: The first_name of this Person.  # noqa: E501
        :type: object
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this Person.  # noqa: E501


        :return: The middle_name of this Person.  # noqa: E501
        :rtype: object
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Person.


        :param middle_name: The middle_name of this Person.  # noqa: E501
        :type: object
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this Person.  # noqa: E501


        :return: The last_name of this Person.  # noqa: E501
        :rtype: object
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Person.


        :param last_name: The last_name of this Person.  # noqa: E501
        :type: object
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def gender(self):
        """Gets the gender of this Person.  # noqa: E501


        :return: The gender of this Person.  # noqa: E501
        :rtype: object
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Person.


        :param gender: The gender of this Person.  # noqa: E501
        :type: object
        """

        self._gender = gender

    @property
    def full_name(self):
        """Gets the full_name of this Person.  # noqa: E501

        Read Only  # noqa: E501

        :return: The full_name of this Person.  # noqa: E501
        :rtype: object
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Person.

        Read Only  # noqa: E501

        :param full_name: The full_name of this Person.  # noqa: E501
        :type: object
        """

        self._full_name = full_name

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Person.  # noqa: E501

        Format: YYYY-MM-DD  # noqa: E501

        :return: The date_of_birth of this Person.  # noqa: E501
        :rtype: object
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Person.

        Format: YYYY-MM-DD  # noqa: E501

        :param date_of_birth: The date_of_birth of this Person.  # noqa: E501
        :type: object
        """

        self._date_of_birth = date_of_birth

    @property
    def timezone(self):
        """Gets the timezone of this Person.  # noqa: E501


        :return: The timezone of this Person.  # noqa: E501
        :rtype: object
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Person.


        :param timezone: The timezone of this Person.  # noqa: E501
        :type: object
        """

        self._timezone = timezone

    @property
    def company(self):
        """Gets the company of this Person.  # noqa: E501


        :return: The company of this Person.  # noqa: E501
        :rtype: object
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this Person.


        :param company: The company of this Person.  # noqa: E501
        :type: object
        """

        self._company = company

    @property
    def company_name(self):
        """Gets the company_name of this Person.  # noqa: E501


        :return: The company_name of this Person.  # noqa: E501
        :rtype: object
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this Person.


        :param company_name: The company_name of this Person.  # noqa: E501
        :type: object
        """

        self._company_name = company_name

    @property
    def job_title(self):
        """Gets the job_title of this Person.  # noqa: E501


        :return: The job_title of this Person.  # noqa: E501
        :rtype: object
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this Person.


        :param job_title: The job_title of this Person.  # noqa: E501
        :type: object
        """

        self._job_title = job_title

    @property
    def notes(self):
        """Gets the notes of this Person.  # noqa: E501


        :return: The notes of this Person.  # noqa: E501
        :rtype: object
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Person.


        :param notes: The notes of this Person.  # noqa: E501
        :type: object
        """

        self._notes = notes

    @property
    def phones(self):
        """Gets the phones of this Person.  # noqa: E501


        :return: The phones of this Person.  # noqa: E501
        :rtype: object
        """
        return self._phones

    @phones.setter
    def phones(self, phones):
        """Sets the phones of this Person.


        :param phones: The phones of this Person.  # noqa: E501
        :type: object
        """

        self._phones = phones

    @property
    def emails(self):
        """Gets the emails of this Person.  # noqa: E501


        :return: The emails of this Person.  # noqa: E501
        :rtype: object
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Person.


        :param emails: The emails of this Person.  # noqa: E501
        :type: object
        """

        self._emails = emails

    @property
    def primary_address(self):
        """Gets the primary_address of this Person.  # noqa: E501


        :return: The primary_address of this Person.  # noqa: E501
        :rtype: Address
        """
        return self._primary_address

    @primary_address.setter
    def primary_address(self, primary_address):
        """Sets the primary_address of this Person.


        :param primary_address: The primary_address of this Person.  # noqa: E501
        :type: Address
        """

        self._primary_address = primary_address

    @property
    def picture_url(self):
        """Gets the picture_url of this Person.  # noqa: E501


        :return: The picture_url of this Person.  # noqa: E501
        :rtype: object
        """
        return self._picture_url

    @picture_url.setter
    def picture_url(self, picture_url):
        """Sets the picture_url of this Person.


        :param picture_url: The picture_url of this Person.  # noqa: E501
        :type: object
        """

        self._picture_url = picture_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Person, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Person):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
