# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TasksUpdateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_id': 'MongoId',
        'message': 'object',
        'due_date': 'object',
        'priority': 'object',
        'status': 'object',
        'assigned_to_users': 'object',
        'notify_tenant': 'object',
        'notify_assignees': 'object'
    }

    attribute_map = {
        'task_id': 'taskId',
        'message': 'message',
        'due_date': 'dueDate',
        'priority': 'priority',
        'status': 'status',
        'assigned_to_users': 'assignedToUsers',
        'notify_tenant': 'notifyTenant',
        'notify_assignees': 'notifyAssignees'
    }

    def __init__(self, task_id=None, message=None, due_date=None, priority=None, status=None, assigned_to_users=None, notify_tenant=None, notify_assignees=None):  # noqa: E501
        """TasksUpdateBody - a model defined in Swagger"""  # noqa: E501
        self._task_id = None
        self._message = None
        self._due_date = None
        self._priority = None
        self._status = None
        self._assigned_to_users = None
        self._notify_tenant = None
        self._notify_assignees = None
        self.discriminator = None
        self.task_id = task_id
        if message is not None:
            self.message = message
        if due_date is not None:
            self.due_date = due_date
        if priority is not None:
            self.priority = priority
        if status is not None:
            self.status = status
        if assigned_to_users is not None:
            self.assigned_to_users = assigned_to_users
        if notify_tenant is not None:
            self.notify_tenant = notify_tenant
        if notify_assignees is not None:
            self.notify_assignees = notify_assignees

    @property
    def task_id(self):
        """Gets the task_id of this TasksUpdateBody.  # noqa: E501


        :return: The task_id of this TasksUpdateBody.  # noqa: E501
        :rtype: MongoId
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this TasksUpdateBody.


        :param task_id: The task_id of this TasksUpdateBody.  # noqa: E501
        :type: MongoId
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    @property
    def message(self):
        """Gets the message of this TasksUpdateBody.  # noqa: E501

        10000  # noqa: E501

        :return: The message of this TasksUpdateBody.  # noqa: E501
        :rtype: object
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TasksUpdateBody.

        10000  # noqa: E501

        :param message: The message of this TasksUpdateBody.  # noqa: E501
        :type: object
        """

        self._message = message

    @property
    def due_date(self):
        """Gets the due_date of this TasksUpdateBody.  # noqa: E501

        Format: YYYY-MM-DD  # noqa: E501

        :return: The due_date of this TasksUpdateBody.  # noqa: E501
        :rtype: object
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this TasksUpdateBody.

        Format: YYYY-MM-DD  # noqa: E501

        :param due_date: The due_date of this TasksUpdateBody.  # noqa: E501
        :type: object
        """

        self._due_date = due_date

    @property
    def priority(self):
        """Gets the priority of this TasksUpdateBody.  # noqa: E501


        :return: The priority of this TasksUpdateBody.  # noqa: E501
        :rtype: object
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TasksUpdateBody.


        :param priority: The priority of this TasksUpdateBody.  # noqa: E501
        :type: object
        """

        self._priority = priority

    @property
    def status(self):
        """Gets the status of this TasksUpdateBody.  # noqa: E501


        :return: The status of this TasksUpdateBody.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TasksUpdateBody.


        :param status: The status of this TasksUpdateBody.  # noqa: E501
        :type: object
        """

        self._status = status

    @property
    def assigned_to_users(self):
        """Gets the assigned_to_users of this TasksUpdateBody.  # noqa: E501


        :return: The assigned_to_users of this TasksUpdateBody.  # noqa: E501
        :rtype: object
        """
        return self._assigned_to_users

    @assigned_to_users.setter
    def assigned_to_users(self, assigned_to_users):
        """Sets the assigned_to_users of this TasksUpdateBody.


        :param assigned_to_users: The assigned_to_users of this TasksUpdateBody.  # noqa: E501
        :type: object
        """

        self._assigned_to_users = assigned_to_users

    @property
    def notify_tenant(self):
        """Gets the notify_tenant of this TasksUpdateBody.  # noqa: E501


        :return: The notify_tenant of this TasksUpdateBody.  # noqa: E501
        :rtype: object
        """
        return self._notify_tenant

    @notify_tenant.setter
    def notify_tenant(self, notify_tenant):
        """Sets the notify_tenant of this TasksUpdateBody.


        :param notify_tenant: The notify_tenant of this TasksUpdateBody.  # noqa: E501
        :type: object
        """

        self._notify_tenant = notify_tenant

    @property
    def notify_assignees(self):
        """Gets the notify_assignees of this TasksUpdateBody.  # noqa: E501


        :return: The notify_assignees of this TasksUpdateBody.  # noqa: E501
        :rtype: object
        """
        return self._notify_assignees

    @notify_assignees.setter
    def notify_assignees(self, notify_assignees):
        """Sets the notify_assignees of this TasksUpdateBody.


        :param notify_assignees: The notify_assignees of this TasksUpdateBody.  # noqa: E501
        :type: object
        """

        self._notify_assignees = notify_assignees

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TasksUpdateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TasksUpdateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
