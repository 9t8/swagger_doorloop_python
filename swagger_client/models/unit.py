# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Unit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'MongoId',
        'active': 'object',
        'address': 'Address',
        'address_same_as_property': 'object',
        'name': 'object',
        'beds': 'object',
        'baths': 'object',
        'size': 'object',
        'market_rent': 'object',
        '_property': 'MongoId',
        'pictures': 'object',
        'description': 'object',
        'listing': 'UnitListing',
        'amenities': 'object'
    }

    attribute_map = {
        'id': 'id',
        'active': 'active',
        'address': 'address',
        'address_same_as_property': 'addressSameAsProperty',
        'name': 'name',
        'beds': 'beds',
        'baths': 'baths',
        'size': 'size',
        'market_rent': 'marketRent',
        '_property': 'property',
        'pictures': 'pictures',
        'description': 'description',
        'listing': 'listing',
        'amenities': 'amenities'
    }

    def __init__(self, id=None, active=None, address=None, address_same_as_property=None, name=None, beds=None, baths=None, size=None, market_rent=None, _property=None, pictures=None, description=None, listing=None, amenities=None):  # noqa: E501
        """Unit - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._active = None
        self._address = None
        self._address_same_as_property = None
        self._name = None
        self._beds = None
        self._baths = None
        self._size = None
        self._market_rent = None
        self.__property = None
        self._pictures = None
        self._description = None
        self._listing = None
        self._amenities = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if active is not None:
            self.active = active
        if address is not None:
            self.address = address
        if address_same_as_property is not None:
            self.address_same_as_property = address_same_as_property
        self.name = name
        if beds is not None:
            self.beds = beds
        if baths is not None:
            self.baths = baths
        if size is not None:
            self.size = size
        if market_rent is not None:
            self.market_rent = market_rent
        self._property = _property
        if pictures is not None:
            self.pictures = pictures
        if description is not None:
            self.description = description
        if listing is not None:
            self.listing = listing
        if amenities is not None:
            self.amenities = amenities

    @property
    def id(self):
        """Gets the id of this Unit.  # noqa: E501


        :return: The id of this Unit.  # noqa: E501
        :rtype: MongoId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Unit.


        :param id: The id of this Unit.  # noqa: E501
        :type: MongoId
        """

        self._id = id

    @property
    def active(self):
        """Gets the active of this Unit.  # noqa: E501


        :return: The active of this Unit.  # noqa: E501
        :rtype: object
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Unit.


        :param active: The active of this Unit.  # noqa: E501
        :type: object
        """

        self._active = active

    @property
    def address(self):
        """Gets the address of this Unit.  # noqa: E501


        :return: The address of this Unit.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Unit.


        :param address: The address of this Unit.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def address_same_as_property(self):
        """Gets the address_same_as_property of this Unit.  # noqa: E501

        If set to true, the address of this unit will be the same as the property it is linked to and the value in the \"address\" property will be ignored.  # noqa: E501

        :return: The address_same_as_property of this Unit.  # noqa: E501
        :rtype: object
        """
        return self._address_same_as_property

    @address_same_as_property.setter
    def address_same_as_property(self, address_same_as_property):
        """Sets the address_same_as_property of this Unit.

        If set to true, the address of this unit will be the same as the property it is linked to and the value in the \"address\" property will be ignored.  # noqa: E501

        :param address_same_as_property: The address_same_as_property of this Unit.  # noqa: E501
        :type: object
        """

        self._address_same_as_property = address_same_as_property

    @property
    def name(self):
        """Gets the name of this Unit.  # noqa: E501


        :return: The name of this Unit.  # noqa: E501
        :rtype: object
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Unit.


        :param name: The name of this Unit.  # noqa: E501
        :type: object
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def beds(self):
        """Gets the beds of this Unit.  # noqa: E501


        :return: The beds of this Unit.  # noqa: E501
        :rtype: object
        """
        return self._beds

    @beds.setter
    def beds(self, beds):
        """Sets the beds of this Unit.


        :param beds: The beds of this Unit.  # noqa: E501
        :type: object
        """

        self._beds = beds

    @property
    def baths(self):
        """Gets the baths of this Unit.  # noqa: E501


        :return: The baths of this Unit.  # noqa: E501
        :rtype: object
        """
        return self._baths

    @baths.setter
    def baths(self, baths):
        """Sets the baths of this Unit.


        :param baths: The baths of this Unit.  # noqa: E501
        :type: object
        """

        self._baths = baths

    @property
    def size(self):
        """Gets the size of this Unit.  # noqa: E501


        :return: The size of this Unit.  # noqa: E501
        :rtype: object
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Unit.


        :param size: The size of this Unit.  # noqa: E501
        :type: object
        """

        self._size = size

    @property
    def market_rent(self):
        """Gets the market_rent of this Unit.  # noqa: E501


        :return: The market_rent of this Unit.  # noqa: E501
        :rtype: object
        """
        return self._market_rent

    @market_rent.setter
    def market_rent(self, market_rent):
        """Sets the market_rent of this Unit.


        :param market_rent: The market_rent of this Unit.  # noqa: E501
        :type: object
        """

        self._market_rent = market_rent

    @property
    def _property(self):
        """Gets the _property of this Unit.  # noqa: E501


        :return: The _property of this Unit.  # noqa: E501
        :rtype: MongoId
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this Unit.


        :param _property: The _property of this Unit.  # noqa: E501
        :type: MongoId
        """
        if _property is None:
            raise ValueError("Invalid value for `_property`, must not be `None`")  # noqa: E501

        self.__property = _property

    @property
    def pictures(self):
        """Gets the pictures of this Unit.  # noqa: E501


        :return: The pictures of this Unit.  # noqa: E501
        :rtype: object
        """
        return self._pictures

    @pictures.setter
    def pictures(self, pictures):
        """Sets the pictures of this Unit.


        :param pictures: The pictures of this Unit.  # noqa: E501
        :type: object
        """

        self._pictures = pictures

    @property
    def description(self):
        """Gets the description of this Unit.  # noqa: E501


        :return: The description of this Unit.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Unit.


        :param description: The description of this Unit.  # noqa: E501
        :type: object
        """

        self._description = description

    @property
    def listing(self):
        """Gets the listing of this Unit.  # noqa: E501


        :return: The listing of this Unit.  # noqa: E501
        :rtype: UnitListing
        """
        return self._listing

    @listing.setter
    def listing(self, listing):
        """Sets the listing of this Unit.


        :param listing: The listing of this Unit.  # noqa: E501
        :type: UnitListing
        """

        self._listing = listing

    @property
    def amenities(self):
        """Gets the amenities of this Unit.  # noqa: E501

        Please refer to the MITS standard for a list of possible values  # noqa: E501

        :return: The amenities of this Unit.  # noqa: E501
        :rtype: object
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities):
        """Sets the amenities of this Unit.

        Please refer to the MITS standard for a list of possible values  # noqa: E501

        :param amenities: The amenities of this Unit.  # noqa: E501
        :type: object
        """

        self._amenities = amenities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Unit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Unit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
