# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UnitListing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_listing': 'object',
        'date_available': 'object',
        'rent': 'object',
        'deposit': 'object',
        'contact': 'object',
        'lease_length': 'object'
    }

    attribute_map = {
        'active_listing': 'activeListing',
        'date_available': 'dateAvailable',
        'rent': 'rent',
        'deposit': 'deposit',
        'contact': 'contact',
        'lease_length': 'leaseLength'
    }

    def __init__(self, active_listing=None, date_available=None, rent=None, deposit=None, contact=None, lease_length=None):  # noqa: E501
        """UnitListing - a model defined in Swagger"""  # noqa: E501
        self._active_listing = None
        self._date_available = None
        self._rent = None
        self._deposit = None
        self._contact = None
        self._lease_length = None
        self.discriminator = None
        if active_listing is not None:
            self.active_listing = active_listing
        if date_available is not None:
            self.date_available = date_available
        if rent is not None:
            self.rent = rent
        if deposit is not None:
            self.deposit = deposit
        if contact is not None:
            self.contact = contact
        if lease_length is not None:
            self.lease_length = lease_length

    @property
    def active_listing(self):
        """Gets the active_listing of this UnitListing.  # noqa: E501


        :return: The active_listing of this UnitListing.  # noqa: E501
        :rtype: object
        """
        return self._active_listing

    @active_listing.setter
    def active_listing(self, active_listing):
        """Sets the active_listing of this UnitListing.


        :param active_listing: The active_listing of this UnitListing.  # noqa: E501
        :type: object
        """

        self._active_listing = active_listing

    @property
    def date_available(self):
        """Gets the date_available of this UnitListing.  # noqa: E501


        :return: The date_available of this UnitListing.  # noqa: E501
        :rtype: object
        """
        return self._date_available

    @date_available.setter
    def date_available(self, date_available):
        """Sets the date_available of this UnitListing.


        :param date_available: The date_available of this UnitListing.  # noqa: E501
        :type: object
        """

        self._date_available = date_available

    @property
    def rent(self):
        """Gets the rent of this UnitListing.  # noqa: E501


        :return: The rent of this UnitListing.  # noqa: E501
        :rtype: object
        """
        return self._rent

    @rent.setter
    def rent(self, rent):
        """Sets the rent of this UnitListing.


        :param rent: The rent of this UnitListing.  # noqa: E501
        :type: object
        """

        self._rent = rent

    @property
    def deposit(self):
        """Gets the deposit of this UnitListing.  # noqa: E501


        :return: The deposit of this UnitListing.  # noqa: E501
        :rtype: object
        """
        return self._deposit

    @deposit.setter
    def deposit(self, deposit):
        """Sets the deposit of this UnitListing.


        :param deposit: The deposit of this UnitListing.  # noqa: E501
        :type: object
        """

        self._deposit = deposit

    @property
    def contact(self):
        """Gets the contact of this UnitListing.  # noqa: E501

        Reference to the User Id who is the listing contact person. The user's contact information (Phone number, Email address) will be posted  # noqa: E501

        :return: The contact of this UnitListing.  # noqa: E501
        :rtype: object
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this UnitListing.

        Reference to the User Id who is the listing contact person. The user's contact information (Phone number, Email address) will be posted  # noqa: E501

        :param contact: The contact of this UnitListing.  # noqa: E501
        :type: object
        """

        self._contact = contact

    @property
    def lease_length(self):
        """Gets the lease_length of this UnitListing.  # noqa: E501


        :return: The lease_length of this UnitListing.  # noqa: E501
        :rtype: object
        """
        return self._lease_length

    @lease_length.setter
    def lease_length(self, lease_length):
        """Sets the lease_length of this UnitListing.


        :param lease_length: The lease_length of this UnitListing.  # noqa: E501
        :type: object
        """

        self._lease_length = lease_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UnitListing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UnitListing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
