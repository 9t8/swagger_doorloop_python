# coding: utf-8

"""
    DoorLoop API Reference

    It does some pretty cool stuff and gives you complete access to DoorLoop's data  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: support@doorloop.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VendorTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'MongoId',
        'vendor': 'MongoId',
        'lines': 'object',
        '_date': 'object',
        'due_date': 'object',
        'memo': 'object',
        'reference': 'object',
        'batch': 'object',
        'total_amount': 'object',
        'total_balance': 'object'
    }

    attribute_map = {
        'id': 'id',
        'vendor': 'vendor',
        'lines': 'lines',
        '_date': 'date',
        'due_date': 'dueDate',
        'memo': 'memo',
        'reference': 'reference',
        'batch': 'batch',
        'total_amount': 'totalAmount',
        'total_balance': 'totalBalance'
    }

    def __init__(self, id=None, vendor=None, lines=None, _date=None, due_date=None, memo=None, reference=None, batch=None, total_amount=None, total_balance=None):  # noqa: E501
        """VendorTransaction - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._vendor = None
        self._lines = None
        self.__date = None
        self._due_date = None
        self._memo = None
        self._reference = None
        self._batch = None
        self._total_amount = None
        self._total_balance = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.vendor = vendor
        self.lines = lines
        self._date = _date
        self.due_date = due_date
        if memo is not None:
            self.memo = memo
        if reference is not None:
            self.reference = reference
        if batch is not None:
            self.batch = batch
        if total_amount is not None:
            self.total_amount = total_amount
        if total_balance is not None:
            self.total_balance = total_balance

    @property
    def id(self):
        """Gets the id of this VendorTransaction.  # noqa: E501


        :return: The id of this VendorTransaction.  # noqa: E501
        :rtype: MongoId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VendorTransaction.


        :param id: The id of this VendorTransaction.  # noqa: E501
        :type: MongoId
        """

        self._id = id

    @property
    def vendor(self):
        """Gets the vendor of this VendorTransaction.  # noqa: E501


        :return: The vendor of this VendorTransaction.  # noqa: E501
        :rtype: MongoId
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this VendorTransaction.


        :param vendor: The vendor of this VendorTransaction.  # noqa: E501
        :type: MongoId
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")  # noqa: E501

        self._vendor = vendor

    @property
    def lines(self):
        """Gets the lines of this VendorTransaction.  # noqa: E501


        :return: The lines of this VendorTransaction.  # noqa: E501
        :rtype: object
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this VendorTransaction.


        :param lines: The lines of this VendorTransaction.  # noqa: E501
        :type: object
        """
        if lines is None:
            raise ValueError("Invalid value for `lines`, must not be `None`")  # noqa: E501

        self._lines = lines

    @property
    def _date(self):
        """Gets the _date of this VendorTransaction.  # noqa: E501

        Format: YYYY-MM-DD  # noqa: E501

        :return: The _date of this VendorTransaction.  # noqa: E501
        :rtype: object
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this VendorTransaction.

        Format: YYYY-MM-DD  # noqa: E501

        :param _date: The _date of this VendorTransaction.  # noqa: E501
        :type: object
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def due_date(self):
        """Gets the due_date of this VendorTransaction.  # noqa: E501

        Format: YYYY-MM-DD  # noqa: E501

        :return: The due_date of this VendorTransaction.  # noqa: E501
        :rtype: object
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this VendorTransaction.

        Format: YYYY-MM-DD  # noqa: E501

        :param due_date: The due_date of this VendorTransaction.  # noqa: E501
        :type: object
        """
        if due_date is None:
            raise ValueError("Invalid value for `due_date`, must not be `None`")  # noqa: E501

        self._due_date = due_date

    @property
    def memo(self):
        """Gets the memo of this VendorTransaction.  # noqa: E501


        :return: The memo of this VendorTransaction.  # noqa: E501
        :rtype: object
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this VendorTransaction.


        :param memo: The memo of this VendorTransaction.  # noqa: E501
        :type: object
        """

        self._memo = memo

    @property
    def reference(self):
        """Gets the reference of this VendorTransaction.  # noqa: E501

        If not provided wil be generated by the server.  # noqa: E501

        :return: The reference of this VendorTransaction.  # noqa: E501
        :rtype: object
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this VendorTransaction.

        If not provided wil be generated by the server.  # noqa: E501

        :param reference: The reference of this VendorTransaction.  # noqa: E501
        :type: object
        """

        self._reference = reference

    @property
    def batch(self):
        """Gets the batch of this VendorTransaction.  # noqa: E501


        :return: The batch of this VendorTransaction.  # noqa: E501
        :rtype: object
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this VendorTransaction.


        :param batch: The batch of this VendorTransaction.  # noqa: E501
        :type: object
        """

        self._batch = batch

    @property
    def total_amount(self):
        """Gets the total_amount of this VendorTransaction.  # noqa: E501

        Read Only. Calculated by the server.  # noqa: E501

        :return: The total_amount of this VendorTransaction.  # noqa: E501
        :rtype: object
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this VendorTransaction.

        Read Only. Calculated by the server.  # noqa: E501

        :param total_amount: The total_amount of this VendorTransaction.  # noqa: E501
        :type: object
        """

        self._total_amount = total_amount

    @property
    def total_balance(self):
        """Gets the total_balance of this VendorTransaction.  # noqa: E501

        Read Only. Calculated by the server.  # noqa: E501

        :return: The total_balance of this VendorTransaction.  # noqa: E501
        :rtype: object
        """
        return self._total_balance

    @total_balance.setter
    def total_balance(self, total_balance):
        """Sets the total_balance of this VendorTransaction.

        Read Only. Calculated by the server.  # noqa: E501

        :param total_balance: The total_balance of this VendorTransaction.  # noqa: E501
        :type: object
        """

        self._total_balance = total_balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VendorTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VendorTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
